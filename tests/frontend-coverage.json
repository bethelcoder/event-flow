{
  "jsCoverage": [
    {
      "url": "http://localhost:3000/socket.io/socket.io.js",
      "scriptId": "7",
      "source": "/*!\n * Socket.IO v4.8.1\n * (c) 2014-2024 Guillermo Rauch\n * Released under the MIT License.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.io = factory());\n})(this, (function () { 'use strict';\n\n  function _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n    return n;\n  }\n  function _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n  }\n  function _construct(t, e, r) {\n    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n    var o = [null];\n    o.push.apply(o, e);\n    var p = new (t.bind.apply(t, o))();\n    return r && _setPrototypeOf(p, r.prototype), p;\n  }\n  function _defineProperties(e, r) {\n    for (var t = 0; t < r.length; t++) {\n      var o = r[t];\n      o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n  }\n  function _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), e;\n  }\n  function _createForOfIteratorHelper(r, e) {\n    var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (!t) {\n      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n        t && (r = t);\n        var n = 0,\n          F = function () {};\n        return {\n          s: F,\n          n: function () {\n            return n >= r.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: r[n++]\n            };\n          },\n          e: function (r) {\n            throw r;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var o,\n      a = !0,\n      u = !1;\n    return {\n      s: function () {\n        t = t.call(r);\n      },\n      n: function () {\n        var r = t.next();\n        return a = r.done, r;\n      },\n      e: function (r) {\n        u = !0, o = r;\n      },\n      f: function () {\n        try {\n          a || null == t.return || t.return();\n        } finally {\n          if (u) throw o;\n        }\n      }\n    };\n  }\n  function _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function (n) {\n      for (var e = 1; e < arguments.length; e++) {\n        var t = arguments[e];\n        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n      }\n      return n;\n    }, _extends.apply(null, arguments);\n  }\n  function _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n  }\n  function _inheritsLoose(t, o) {\n    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);\n  }\n  function _isNativeFunction(t) {\n    try {\n      return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n    } catch (n) {\n      return \"function\" == typeof t;\n    }\n  }\n  function _isNativeReflectConstruct() {\n    try {\n      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function () {\n      return !!t;\n    })();\n  }\n  function _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n  }\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  function _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n      return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n  }\n  function _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n  }\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _unsupportedIterableToArray(r, a) {\n    if (r) {\n      if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n      var t = {}.toString.call(r).slice(8, -1);\n      return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n  }\n  function _wrapNativeSuper(t) {\n    var r = \"function\" == typeof Map ? new Map() : void 0;\n    return _wrapNativeSuper = function (t) {\n      if (null === t || !_isNativeFunction(t)) return t;\n      if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n      if (void 0 !== r) {\n        if (r.has(t)) return r.get(t);\n        r.set(t, Wrapper);\n      }\n      function Wrapper() {\n        return _construct(t, arguments, _getPrototypeOf(this).constructor);\n      }\n      return Wrapper.prototype = Object.create(t.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), _setPrototypeOf(Wrapper, t);\n    }, _wrapNativeSuper(t);\n  }\n\n  var PACKET_TYPES = Object.create(null); // no Map = no polyfill\n  PACKET_TYPES[\"open\"] = \"0\";\n  PACKET_TYPES[\"close\"] = \"1\";\n  PACKET_TYPES[\"ping\"] = \"2\";\n  PACKET_TYPES[\"pong\"] = \"3\";\n  PACKET_TYPES[\"message\"] = \"4\";\n  PACKET_TYPES[\"upgrade\"] = \"5\";\n  PACKET_TYPES[\"noop\"] = \"6\";\n  var PACKET_TYPES_REVERSE = Object.create(null);\n  Object.keys(PACKET_TYPES).forEach(function (key) {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n  });\n  var ERROR_PACKET = {\n    type: \"error\",\n    data: \"parser error\"\n  };\n\n  var withNativeBlob$1 = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\";\n  var withNativeArrayBuffer$2 = typeof ArrayBuffer === \"function\";\n  // ArrayBuffer.isView method is not defined in IE10\n  var isView$1 = function isView(obj) {\n    return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;\n  };\n  var encodePacket = function encodePacket(_ref, supportsBinary, callback) {\n    var type = _ref.type,\n      data = _ref.data;\n    if (withNativeBlob$1 && data instanceof Blob) {\n      if (supportsBinary) {\n        return callback(data);\n      } else {\n        return encodeBlobAsBase64(data, callback);\n      }\n    } else if (withNativeArrayBuffer$2 && (data instanceof ArrayBuffer || isView$1(data))) {\n      if (supportsBinary) {\n        return callback(data);\n      } else {\n        return encodeBlobAsBase64(new Blob([data]), callback);\n      }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n  };\n  var encodeBlobAsBase64 = function encodeBlobAsBase64(data, callback) {\n    var fileReader = new FileReader();\n    fileReader.onload = function () {\n      var content = fileReader.result.split(\",\")[1];\n      callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n  };\n  function toArray(data) {\n    if (data instanceof Uint8Array) {\n      return data;\n    } else if (data instanceof ArrayBuffer) {\n      return new Uint8Array(data);\n    } else {\n      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n  }\n  var TEXT_ENCODER;\n  function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob$1 && packet.data instanceof Blob) {\n      return packet.data.arrayBuffer().then(toArray).then(callback);\n    } else if (withNativeArrayBuffer$2 && (packet.data instanceof ArrayBuffer || isView$1(packet.data))) {\n      return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, function (encoded) {\n      if (!TEXT_ENCODER) {\n        TEXT_ENCODER = new TextEncoder();\n      }\n      callback(TEXT_ENCODER.encode(encoded));\n    });\n  }\n\n  // imported from https://github.com/socketio/base64-arraybuffer\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  // Use a lookup table to find the index.\n  var lookup$1 = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup$1[chars.charCodeAt(i)] = i;\n  }\n  var decode$1 = function decode(base64) {\n    var bufferLength = base64.length * 0.75,\n      len = base64.length,\n      i,\n      p = 0,\n      encoded1,\n      encoded2,\n      encoded3,\n      encoded4;\n    if (base64[base64.length - 1] === '=') {\n      bufferLength--;\n      if (base64[base64.length - 2] === '=') {\n        bufferLength--;\n      }\n    }\n    var arraybuffer = new ArrayBuffer(bufferLength),\n      bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n      encoded1 = lookup$1[base64.charCodeAt(i)];\n      encoded2 = lookup$1[base64.charCodeAt(i + 1)];\n      encoded3 = lookup$1[base64.charCodeAt(i + 2)];\n      encoded4 = lookup$1[base64.charCodeAt(i + 3)];\n      bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return arraybuffer;\n  };\n\n  var withNativeArrayBuffer$1 = typeof ArrayBuffer === \"function\";\n  var decodePacket = function decodePacket(encodedPacket, binaryType) {\n    if (typeof encodedPacket !== \"string\") {\n      return {\n        type: \"message\",\n        data: mapBinary(encodedPacket, binaryType)\n      };\n    }\n    var type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n      return {\n        type: \"message\",\n        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n      };\n    }\n    var packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n      return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1 ? {\n      type: PACKET_TYPES_REVERSE[type],\n      data: encodedPacket.substring(1)\n    } : {\n      type: PACKET_TYPES_REVERSE[type]\n    };\n  };\n  var decodeBase64Packet = function decodeBase64Packet(data, binaryType) {\n    if (withNativeArrayBuffer$1) {\n      var decoded = decode$1(data);\n      return mapBinary(decoded, binaryType);\n    } else {\n      return {\n        base64: true,\n        data: data\n      }; // fallback for old browsers\n    }\n  };\n  var mapBinary = function mapBinary(data, binaryType) {\n    switch (binaryType) {\n      case \"blob\":\n        if (data instanceof Blob) {\n          // from WebSocket + binaryType \"blob\"\n          return data;\n        } else {\n          // from HTTP long-polling or WebTransport\n          return new Blob([data]);\n        }\n      case \"arraybuffer\":\n      default:\n        if (data instanceof ArrayBuffer) {\n          // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n          return data;\n        } else {\n          // from WebTransport (Uint8Array)\n          return data.buffer;\n        }\n    }\n  };\n\n  var SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n  var encodePayload = function encodePayload(packets, callback) {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    var length = packets.length;\n    var encodedPackets = new Array(length);\n    var count = 0;\n    packets.forEach(function (packet, i) {\n      // force base64 encoding for binary packets\n      encodePacket(packet, false, function (encodedPacket) {\n        encodedPackets[i] = encodedPacket;\n        if (++count === length) {\n          callback(encodedPackets.join(SEPARATOR));\n        }\n      });\n    });\n  };\n  var decodePayload = function decodePayload(encodedPayload, binaryType) {\n    var encodedPackets = encodedPayload.split(SEPARATOR);\n    var packets = [];\n    for (var i = 0; i < encodedPackets.length; i++) {\n      var decodedPacket = decodePacket(encodedPackets[i], binaryType);\n      packets.push(decodedPacket);\n      if (decodedPacket.type === \"error\") {\n        break;\n      }\n    }\n    return packets;\n  };\n  function createPacketEncoderStream() {\n    return new TransformStream({\n      transform: function transform(packet, controller) {\n        encodePacketToBinary(packet, function (encodedPacket) {\n          var payloadLength = encodedPacket.length;\n          var header;\n          // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n          if (payloadLength < 126) {\n            header = new Uint8Array(1);\n            new DataView(header.buffer).setUint8(0, payloadLength);\n          } else if (payloadLength < 65536) {\n            header = new Uint8Array(3);\n            var view = new DataView(header.buffer);\n            view.setUint8(0, 126);\n            view.setUint16(1, payloadLength);\n          } else {\n            header = new Uint8Array(9);\n            var _view = new DataView(header.buffer);\n            _view.setUint8(0, 127);\n            _view.setBigUint64(1, BigInt(payloadLength));\n          }\n          // first bit indicates whether the payload is plain text (0) or binary (1)\n          if (packet.data && typeof packet.data !== \"string\") {\n            header[0] |= 0x80;\n          }\n          controller.enqueue(header);\n          controller.enqueue(encodedPacket);\n        });\n      }\n    });\n  }\n  var TEXT_DECODER;\n  function totalLength(chunks) {\n    return chunks.reduce(function (acc, chunk) {\n      return acc + chunk.length;\n    }, 0);\n  }\n  function concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n      return chunks.shift();\n    }\n    var buffer = new Uint8Array(size);\n    var j = 0;\n    for (var i = 0; i < size; i++) {\n      buffer[i] = chunks[0][j++];\n      if (j === chunks[0].length) {\n        chunks.shift();\n        j = 0;\n      }\n    }\n    if (chunks.length && j < chunks[0].length) {\n      chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n  }\n  function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n      TEXT_DECODER = new TextDecoder();\n    }\n    var chunks = [];\n    var state = 0 /* State.READ_HEADER */;\n    var expectedLength = -1;\n    var isBinary = false;\n    return new TransformStream({\n      transform: function transform(chunk, controller) {\n        chunks.push(chunk);\n        while (true) {\n          if (state === 0 /* State.READ_HEADER */) {\n            if (totalLength(chunks) < 1) {\n              break;\n            }\n            var header = concatChunks(chunks, 1);\n            isBinary = (header[0] & 0x80) === 0x80;\n            expectedLength = header[0] & 0x7f;\n            if (expectedLength < 126) {\n              state = 3 /* State.READ_PAYLOAD */;\n            } else if (expectedLength === 126) {\n              state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n            } else {\n              state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n            }\n          } else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n            if (totalLength(chunks) < 2) {\n              break;\n            }\n            var headerArray = concatChunks(chunks, 2);\n            expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n            state = 3 /* State.READ_PAYLOAD */;\n          } else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n            if (totalLength(chunks) < 8) {\n              break;\n            }\n            var _headerArray = concatChunks(chunks, 8);\n            var view = new DataView(_headerArray.buffer, _headerArray.byteOffset, _headerArray.length);\n            var n = view.getUint32(0);\n            if (n > Math.pow(2, 53 - 32) - 1) {\n              // the maximum safe integer in JavaScript is 2^53 - 1\n              controller.enqueue(ERROR_PACKET);\n              break;\n            }\n            expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n            state = 3 /* State.READ_PAYLOAD */;\n          } else {\n            if (totalLength(chunks) < expectedLength) {\n              break;\n            }\n            var data = concatChunks(chunks, expectedLength);\n            controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n            state = 0 /* State.READ_HEADER */;\n          }\n          if (expectedLength === 0 || expectedLength > maxPayload) {\n            controller.enqueue(ERROR_PACKET);\n            break;\n          }\n        }\n      }\n    });\n  }\n  var protocol$1 = 4;\n\n  /**\n   * Initialize a new `Emitter`.\n   *\n   * @api public\n   */\n\n  function Emitter(obj) {\n    if (obj) return mixin(obj);\n  }\n\n  /**\n   * Mixin the emitter properties.\n   *\n   * @param {Object} obj\n   * @return {Object}\n   * @api private\n   */\n\n  function mixin(obj) {\n    for (var key in Emitter.prototype) {\n      obj[key] = Emitter.prototype[key];\n    }\n    return obj;\n  }\n\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   * @return {Emitter}\n   * @api public\n   */\n\n  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {\n    this._callbacks = this._callbacks || {};\n    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   * @return {Emitter}\n   * @api public\n   */\n\n  Emitter.prototype.once = function (event, fn) {\n    function on() {\n      this.off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   * @return {Emitter}\n   * @api public\n   */\n\n  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {\n    this._callbacks = this._callbacks || {};\n\n    // all\n    if (0 == arguments.length) {\n      this._callbacks = {};\n      return this;\n    }\n\n    // specific event\n    var callbacks = this._callbacks['$' + event];\n    if (!callbacks) return this;\n\n    // remove all handlers\n    if (1 == arguments.length) {\n      delete this._callbacks['$' + event];\n      return this;\n    }\n\n    // remove specific handler\n    var cb;\n    for (var i = 0; i < callbacks.length; i++) {\n      cb = callbacks[i];\n      if (cb === fn || cb.fn === fn) {\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n\n    // Remove event specific arrays for event types that no\n    // one is subscribed for to avoid memory leak.\n    if (callbacks.length === 0) {\n      delete this._callbacks['$' + event];\n    }\n    return this;\n  };\n\n  /**\n   * Emit `event` with the given args.\n   *\n   * @param {String} event\n   * @param {Mixed} ...\n   * @return {Emitter}\n   */\n\n  Emitter.prototype.emit = function (event) {\n    this._callbacks = this._callbacks || {};\n    var args = new Array(arguments.length - 1),\n      callbacks = this._callbacks['$' + event];\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n    if (callbacks) {\n      callbacks = callbacks.slice(0);\n      for (var i = 0, len = callbacks.length; i < len; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n    return this;\n  };\n\n  // alias used for reserved events (protected method)\n  Emitter.prototype.emitReserved = Emitter.prototype.emit;\n\n  /**\n   * Return array of callbacks for `event`.\n   *\n   * @param {String} event\n   * @return {Array}\n   * @api public\n   */\n\n  Emitter.prototype.listeners = function (event) {\n    this._callbacks = this._callbacks || {};\n    return this._callbacks['$' + event] || [];\n  };\n\n  /**\n   * Check if this emitter has `event` handlers.\n   *\n   * @param {String} event\n   * @return {Boolean}\n   * @api public\n   */\n\n  Emitter.prototype.hasListeners = function (event) {\n    return !!this.listeners(event).length;\n  };\n\n  var nextTick = function () {\n    var isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n      return function (cb) {\n        return Promise.resolve().then(cb);\n      };\n    } else {\n      return function (cb, setTimeoutFn) {\n        return setTimeoutFn(cb, 0);\n      };\n    }\n  }();\n  var globalThisShim = function () {\n    if (typeof self !== \"undefined\") {\n      return self;\n    } else if (typeof window !== \"undefined\") {\n      return window;\n    } else {\n      return Function(\"return this\")();\n    }\n  }();\n  var defaultBinaryType = \"arraybuffer\";\n  function createCookieJar() {}\n\n  function pick(obj) {\n    for (var _len = arguments.length, attr = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      attr[_key - 1] = arguments[_key];\n    }\n    return attr.reduce(function (acc, k) {\n      if (obj.hasOwnProperty(k)) {\n        acc[k] = obj[k];\n      }\n      return acc;\n    }, {});\n  }\n  // Keep a reference to the real timeout functions so they can be used when overridden\n  var NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;\n  var NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;\n  function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);\n      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);\n    } else {\n      obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);\n      obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);\n    }\n  }\n  // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\n  var BASE64_OVERHEAD = 1.33;\n  // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\n  function byteLength(obj) {\n    if (typeof obj === \"string\") {\n      return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n  }\n  function utf8Length(str) {\n    var c = 0,\n      length = 0;\n    for (var i = 0, l = str.length; i < l; i++) {\n      c = str.charCodeAt(i);\n      if (c < 0x80) {\n        length += 1;\n      } else if (c < 0x800) {\n        length += 2;\n      } else if (c < 0xd800 || c >= 0xe000) {\n        length += 3;\n      } else {\n        i++;\n        length += 4;\n      }\n    }\n    return length;\n  }\n  /**\n   * Generates a random 8-characters string.\n   */\n  function randomString() {\n    return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);\n  }\n\n  // imported from https://github.com/galkn/querystring\n  /**\n   * Compiles a querystring\n   * Returns string representation of the object\n   *\n   * @param {Object}\n   * @api private\n   */\n  function encode(obj) {\n    var str = '';\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        if (str.length) str += '&';\n        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n      }\n    }\n    return str;\n  }\n  /**\n   * Parses a simple querystring into an object\n   *\n   * @param {String} qs\n   * @api private\n   */\n  function decode(qs) {\n    var qry = {};\n    var pairs = qs.split('&');\n    for (var i = 0, l = pairs.length; i < l; i++) {\n      var pair = pairs[i].split('=');\n      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n  }\n\n  var TransportError = /*#__PURE__*/function (_Error) {\n    function TransportError(reason, description, context) {\n      var _this;\n      _this = _Error.call(this, reason) || this;\n      _this.description = description;\n      _this.context = context;\n      _this.type = \"TransportError\";\n      return _this;\n    }\n    _inheritsLoose(TransportError, _Error);\n    return TransportError;\n  }( /*#__PURE__*/_wrapNativeSuper(Error));\n  var Transport = /*#__PURE__*/function (_Emitter) {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    function Transport(opts) {\n      var _this2;\n      _this2 = _Emitter.call(this) || this;\n      _this2.writable = false;\n      installTimerFunctions(_this2, opts);\n      _this2.opts = opts;\n      _this2.query = opts.query;\n      _this2.socket = opts.socket;\n      _this2.supportsBinary = !opts.forceBase64;\n      return _this2;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    _inheritsLoose(Transport, _Emitter);\n    var _proto = Transport.prototype;\n    _proto.onError = function onError(reason, description, context) {\n      _Emitter.prototype.emitReserved.call(this, \"error\", new TransportError(reason, description, context));\n      return this;\n    }\n    /**\n     * Opens the transport.\n     */;\n    _proto.open = function open() {\n      this.readyState = \"opening\";\n      this.doOpen();\n      return this;\n    }\n    /**\n     * Closes the transport.\n     */;\n    _proto.close = function close() {\n      if (this.readyState === \"opening\" || this.readyState === \"open\") {\n        this.doClose();\n        this.onClose();\n      }\n      return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */;\n    _proto.send = function send(packets) {\n      if (this.readyState === \"open\") {\n        this.write(packets);\n      }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */;\n    _proto.onOpen = function onOpen() {\n      this.readyState = \"open\";\n      this.writable = true;\n      _Emitter.prototype.emitReserved.call(this, \"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */;\n    _proto.onData = function onData(data) {\n      var packet = decodePacket(data, this.socket.binaryType);\n      this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */;\n    _proto.onPacket = function onPacket(packet) {\n      _Emitter.prototype.emitReserved.call(this, \"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */;\n    _proto.onClose = function onClose(details) {\n      this.readyState = \"closed\";\n      _Emitter.prototype.emitReserved.call(this, \"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */;\n    _proto.pause = function pause(onPause) {};\n    _proto.createUri = function createUri(schema) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return schema + \"://\" + this._hostname() + this._port() + this.opts.path + this._query(query);\n    };\n    _proto._hostname = function _hostname() {\n      var hostname = this.opts.hostname;\n      return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    };\n    _proto._port = function _port() {\n      if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {\n        return \":\" + this.opts.port;\n      } else {\n        return \"\";\n      }\n    };\n    _proto._query = function _query(query) {\n      var encodedQuery = encode(query);\n      return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    };\n    return Transport;\n  }(Emitter);\n\n  var Polling = /*#__PURE__*/function (_Transport) {\n    function Polling() {\n      var _this;\n      _this = _Transport.apply(this, arguments) || this;\n      _this._polling = false;\n      return _this;\n    }\n    _inheritsLoose(Polling, _Transport);\n    var _proto = Polling.prototype;\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    _proto.doOpen = function doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */;\n    _proto.pause = function pause(onPause) {\n      var _this2 = this;\n      this.readyState = \"pausing\";\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n      if (this._polling || !this.writable) {\n        var total = 0;\n        if (this._polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */;\n    _proto._poll = function _poll() {\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */;\n    _proto.onData = function onData(data) {\n      var _this3 = this;\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          _this3.onClose({\n            description: \"transport closed by the server\"\n          });\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        _this3.onPacket(packet);\n      };\n      // decode payload\n      decodePayload(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this._poll();\n        }\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */;\n    _proto.doClose = function doClose() {\n      var _this4 = this;\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */;\n    _proto.write = function write(packets) {\n      var _this5 = this;\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n          _this5.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */;\n    _proto.uri = function uri() {\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var query = this.query || {};\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = randomString();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    };\n    return _createClass(Polling, [{\n      key: \"name\",\n      get: function get() {\n        return \"polling\";\n      }\n    }]);\n  }(Transport);\n\n  // imported from https://github.com/component/has-cors\n  var value = false;\n  try {\n    value = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();\n  } catch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n  }\n  var hasCORS = value;\n\n  function empty() {}\n  var BaseXHR = /*#__PURE__*/function (_Polling) {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @package\n     */\n    function BaseXHR(opts) {\n      var _this;\n      _this = _Polling.call(this, opts) || this;\n      if (typeof location !== \"undefined\") {\n        var isSSL = \"https:\" === location.protocol;\n        var port = location.port;\n        // some user agents have empty `location.port`\n        if (!port) {\n          port = isSSL ? \"443\" : \"80\";\n        }\n        _this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      }\n      return _this;\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @private\n     */\n    _inheritsLoose(BaseXHR, _Polling);\n    var _proto = BaseXHR.prototype;\n    _proto.doWrite = function doWrite(data, fn) {\n      var _this2 = this;\n      var req = this.request({\n        method: \"POST\",\n        data: data\n      });\n      req.on(\"success\", fn);\n      req.on(\"error\", function (xhrStatus, context) {\n        _this2.onError(\"xhr post error\", xhrStatus, context);\n      });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @private\n     */;\n    _proto.doPoll = function doPoll() {\n      var _this3 = this;\n      var req = this.request();\n      req.on(\"data\", this.onData.bind(this));\n      req.on(\"error\", function (xhrStatus, context) {\n        _this3.onError(\"xhr poll error\", xhrStatus, context);\n      });\n      this.pollXhr = req;\n    };\n    return BaseXHR;\n  }(Polling);\n  var Request = /*#__PURE__*/function (_Emitter) {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @package\n     */\n    function Request(createRequest, uri, opts) {\n      var _this4;\n      _this4 = _Emitter.call(this) || this;\n      _this4.createRequest = createRequest;\n      installTimerFunctions(_this4, opts);\n      _this4._opts = opts;\n      _this4._method = opts.method || \"GET\";\n      _this4._uri = uri;\n      _this4._data = undefined !== opts.data ? opts.data : null;\n      _this4._create();\n      return _this4;\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @private\n     */\n    _inheritsLoose(Request, _Emitter);\n    var _proto2 = Request.prototype;\n    _proto2._create = function _create() {\n      var _this5 = this;\n      var _a;\n      var opts = pick(this._opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n      opts.xdomain = !!this._opts.xd;\n      var xhr = this._xhr = this.createRequest(opts);\n      try {\n        xhr.open(this._method, this._uri, true);\n        try {\n          if (this._opts.extraHeaders) {\n            // @ts-ignore\n            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n            for (var i in this._opts.extraHeaders) {\n              if (this._opts.extraHeaders.hasOwnProperty(i)) {\n                xhr.setRequestHeader(i, this._opts.extraHeaders[i]);\n              }\n            }\n          }\n        } catch (e) {}\n        if (\"POST\" === this._method) {\n          try {\n            xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n          } catch (e) {}\n        }\n        try {\n          xhr.setRequestHeader(\"Accept\", \"*/*\");\n        } catch (e) {}\n        (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n        // ie6 check\n        if (\"withCredentials\" in xhr) {\n          xhr.withCredentials = this._opts.withCredentials;\n        }\n        if (this._opts.requestTimeout) {\n          xhr.timeout = this._opts.requestTimeout;\n        }\n        xhr.onreadystatechange = function () {\n          var _a;\n          if (xhr.readyState === 3) {\n            (_a = _this5._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(\n            // @ts-ignore\n            xhr.getResponseHeader(\"set-cookie\"));\n          }\n          if (4 !== xhr.readyState) return;\n          if (200 === xhr.status || 1223 === xhr.status) {\n            _this5._onLoad();\n          } else {\n            // make sure the `error` event handler that's user-set\n            // does not throw in the same tick and gets caught here\n            _this5.setTimeoutFn(function () {\n              _this5._onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n            }, 0);\n          }\n        };\n        xhr.send(this._data);\n      } catch (e) {\n        // Need to defer since .create() is called directly from the constructor\n        // and thus the 'error' event can only be only bound *after* this exception\n        // occurs.  Therefore, also, we cannot throw here at all.\n        this.setTimeoutFn(function () {\n          _this5._onError(e);\n        }, 0);\n        return;\n      }\n      if (typeof document !== \"undefined\") {\n        this._index = Request.requestsCount++;\n        Request.requests[this._index] = this;\n      }\n    }\n    /**\n     * Called upon error.\n     *\n     * @private\n     */;\n    _proto2._onError = function _onError(err) {\n      this.emitReserved(\"error\", err, this._xhr);\n      this._cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @private\n     */;\n    _proto2._cleanup = function _cleanup(fromError) {\n      if (\"undefined\" === typeof this._xhr || null === this._xhr) {\n        return;\n      }\n      this._xhr.onreadystatechange = empty;\n      if (fromError) {\n        try {\n          this._xhr.abort();\n        } catch (e) {}\n      }\n      if (typeof document !== \"undefined\") {\n        delete Request.requests[this._index];\n      }\n      this._xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @private\n     */;\n    _proto2._onLoad = function _onLoad() {\n      var data = this._xhr.responseText;\n      if (data !== null) {\n        this.emitReserved(\"data\", data);\n        this.emitReserved(\"success\");\n        this._cleanup();\n      }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @package\n     */;\n    _proto2.abort = function abort() {\n      this._cleanup();\n    };\n    return Request;\n  }(Emitter);\n  Request.requestsCount = 0;\n  Request.requests = {};\n  /**\n   * Aborts pending requests when unloading the window. This is needed to prevent\n   * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n   * emitted.\n   */\n  if (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n      // @ts-ignore\n      attachEvent(\"onunload\", unloadHandler);\n    } else if (typeof addEventListener === \"function\") {\n      var terminationEvent = \"onpagehide\" in globalThisShim ? \"pagehide\" : \"unload\";\n      addEventListener(terminationEvent, unloadHandler, false);\n    }\n  }\n  function unloadHandler() {\n    for (var i in Request.requests) {\n      if (Request.requests.hasOwnProperty(i)) {\n        Request.requests[i].abort();\n      }\n    }\n  }\n  var hasXHR2 = function () {\n    var xhr = newRequest({\n      xdomain: false\n    });\n    return xhr && xhr.responseType !== null;\n  }();\n  /**\n   * HTTP long-polling based on the built-in `XMLHttpRequest` object.\n   *\n   * Usage: browser\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n   */\n  var XHR = /*#__PURE__*/function (_BaseXHR) {\n    function XHR(opts) {\n      var _this6;\n      _this6 = _BaseXHR.call(this, opts) || this;\n      var forceBase64 = opts && opts.forceBase64;\n      _this6.supportsBinary = hasXHR2 && !forceBase64;\n      return _this6;\n    }\n    _inheritsLoose(XHR, _BaseXHR);\n    var _proto3 = XHR.prototype;\n    _proto3.request = function request() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _extends(opts, {\n        xd: this.xd\n      }, this.opts);\n      return new Request(newRequest, this.uri(), opts);\n    };\n    return XHR;\n  }(BaseXHR);\n  function newRequest(opts) {\n    var xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n      if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n        return new XMLHttpRequest();\n      }\n    } catch (e) {}\n    if (!xdomain) {\n      try {\n        return new globalThisShim[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n      } catch (e) {}\n    }\n  }\n\n  // detect ReactNative environment\n  var isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n  var BaseWS = /*#__PURE__*/function (_Transport) {\n    function BaseWS() {\n      return _Transport.apply(this, arguments) || this;\n    }\n    _inheritsLoose(BaseWS, _Transport);\n    var _proto = BaseWS.prototype;\n    _proto.doOpen = function doOpen() {\n      var uri = this.uri();\n      var protocols = this.opts.protocols;\n      // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n      var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n      if (this.opts.extraHeaders) {\n        opts.headers = this.opts.extraHeaders;\n      }\n      try {\n        this.ws = this.createSocket(uri, protocols, opts);\n      } catch (err) {\n        return this.emitReserved(\"error\", err);\n      }\n      this.ws.binaryType = this.socket.binaryType;\n      this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */;\n    _proto.addEventListeners = function addEventListeners() {\n      var _this = this;\n      this.ws.onopen = function () {\n        if (_this.opts.autoUnref) {\n          _this.ws._socket.unref();\n        }\n        _this.onOpen();\n      };\n      this.ws.onclose = function (closeEvent) {\n        return _this.onClose({\n          description: \"websocket connection closed\",\n          context: closeEvent\n        });\n      };\n      this.ws.onmessage = function (ev) {\n        return _this.onData(ev.data);\n      };\n      this.ws.onerror = function (e) {\n        return _this.onError(\"websocket error\", e);\n      };\n    };\n    _proto.write = function write(packets) {\n      var _this2 = this;\n      this.writable = false;\n      // encodePacket efficient as it uses WS framing\n      // no need for encodePayload\n      var _loop = function _loop() {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n        encodePacket(packet, _this2.supportsBinary, function (data) {\n          // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n          try {\n            _this2.doWrite(packet, data);\n          } catch (e) {}\n          if (lastPacket) {\n            // fake drain\n            // defer to next tick to allow Socket to clear writeBuffer\n            nextTick(function () {\n              _this2.writable = true;\n              _this2.emitReserved(\"drain\");\n            }, _this2.setTimeoutFn);\n          }\n        });\n      };\n      for (var i = 0; i < packets.length; i++) {\n        _loop();\n      }\n    };\n    _proto.doClose = function doClose() {\n      if (typeof this.ws !== \"undefined\") {\n        this.ws.onerror = function () {};\n        this.ws.close();\n        this.ws = null;\n      }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */;\n    _proto.uri = function uri() {\n      var schema = this.opts.secure ? \"wss\" : \"ws\";\n      var query = this.query || {};\n      // append timestamp to URI\n      if (this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = randomString();\n      }\n      // communicate binary support capabilities\n      if (!this.supportsBinary) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    };\n    return _createClass(BaseWS, [{\n      key: \"name\",\n      get: function get() {\n        return \"websocket\";\n      }\n    }]);\n  }(Transport);\n  var WebSocketCtor = globalThisShim.WebSocket || globalThisShim.MozWebSocket;\n  /**\n   * WebSocket transport based on the built-in `WebSocket` object.\n   *\n   * Usage: browser, Node.js (since v21), Deno, Bun\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n   * @see https://caniuse.com/mdn-api_websocket\n   * @see https://nodejs.org/api/globals.html#websocket\n   */\n  var WS = /*#__PURE__*/function (_BaseWS) {\n    function WS() {\n      return _BaseWS.apply(this, arguments) || this;\n    }\n    _inheritsLoose(WS, _BaseWS);\n    var _proto2 = WS.prototype;\n    _proto2.createSocket = function createSocket(uri, protocols, opts) {\n      return !isReactNative ? protocols ? new WebSocketCtor(uri, protocols) : new WebSocketCtor(uri) : new WebSocketCtor(uri, protocols, opts);\n    };\n    _proto2.doWrite = function doWrite(_packet, data) {\n      this.ws.send(data);\n    };\n    return WS;\n  }(BaseWS);\n\n  /**\n   * WebTransport transport based on the built-in `WebTransport` object.\n   *\n   * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n   * @see https://caniuse.com/webtransport\n   */\n  var WT = /*#__PURE__*/function (_Transport) {\n    function WT() {\n      return _Transport.apply(this, arguments) || this;\n    }\n    _inheritsLoose(WT, _Transport);\n    var _proto = WT.prototype;\n    _proto.doOpen = function doOpen() {\n      var _this = this;\n      try {\n        // @ts-ignore\n        this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n      } catch (err) {\n        return this.emitReserved(\"error\", err);\n      }\n      this._transport.closed.then(function () {\n        _this.onClose();\n      })[\"catch\"](function (err) {\n        _this.onError(\"webtransport error\", err);\n      });\n      // note: we could have used async/await, but that would require some additional polyfills\n      this._transport.ready.then(function () {\n        _this._transport.createBidirectionalStream().then(function (stream) {\n          var decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, _this.socket.binaryType);\n          var reader = stream.readable.pipeThrough(decoderStream).getReader();\n          var encoderStream = createPacketEncoderStream();\n          encoderStream.readable.pipeTo(stream.writable);\n          _this._writer = encoderStream.writable.getWriter();\n          var read = function read() {\n            reader.read().then(function (_ref) {\n              var done = _ref.done,\n                value = _ref.value;\n              if (done) {\n                return;\n              }\n              _this.onPacket(value);\n              read();\n            })[\"catch\"](function (err) {});\n          };\n          read();\n          var packet = {\n            type: \"open\"\n          };\n          if (_this.query.sid) {\n            packet.data = \"{\\\"sid\\\":\\\"\".concat(_this.query.sid, \"\\\"}\");\n          }\n          _this._writer.write(packet).then(function () {\n            return _this.onOpen();\n          });\n        });\n      });\n    };\n    _proto.write = function write(packets) {\n      var _this2 = this;\n      this.writable = false;\n      var _loop = function _loop() {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n        _this2._writer.write(packet).then(function () {\n          if (lastPacket) {\n            nextTick(function () {\n              _this2.writable = true;\n              _this2.emitReserved(\"drain\");\n            }, _this2.setTimeoutFn);\n          }\n        });\n      };\n      for (var i = 0; i < packets.length; i++) {\n        _loop();\n      }\n    };\n    _proto.doClose = function doClose() {\n      var _a;\n      (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n    };\n    return _createClass(WT, [{\n      key: \"name\",\n      get: function get() {\n        return \"webtransport\";\n      }\n    }]);\n  }(Transport);\n\n  var transports = {\n    websocket: WS,\n    webtransport: WT,\n    polling: XHR\n  };\n\n  // imported from https://github.com/galkn/parseuri\n  /**\n   * Parses a URI\n   *\n   * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n   *\n   * See:\n   * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n   * - https://caniuse.com/url\n   * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n   *\n   * History of the parse() method:\n   * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n   * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n   * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api private\n   */\n  var re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\n  function parse(str) {\n    if (str.length > 8000) {\n      throw \"URI too long\";\n    }\n    var src = str,\n      b = str.indexOf('['),\n      e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n      str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    var m = re.exec(str || ''),\n      uri = {},\n      i = 14;\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n      uri.source = src;\n      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n      uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n      uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n  }\n  function pathNames(obj, path) {\n    var regx = /\\/{2,9}/g,\n      names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n      names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n      names.splice(names.length - 1, 1);\n    }\n    return names;\n  }\n  function queryKey(uri, query) {\n    var data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n      if ($1) {\n        data[$1] = $2;\n      }\n    });\n    return data;\n  }\n\n  var withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\n  var OFFLINE_EVENT_LISTENERS = [];\n  if (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", function () {\n      OFFLINE_EVENT_LISTENERS.forEach(function (listener) {\n        return listener();\n      });\n    }, false);\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n   * successfully establishes the connection.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithoutUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithUpgrade\n   * @see Socket\n   */\n  var SocketWithoutUpgrade = /*#__PURE__*/function (_Emitter) {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    function SocketWithoutUpgrade(uri, opts) {\n      var _this;\n      _this = _Emitter.call(this) || this;\n      _this.binaryType = defaultBinaryType;\n      _this.writeBuffer = [];\n      _this._prevBufferLen = 0;\n      _this._pingInterval = -1;\n      _this._pingTimeout = -1;\n      _this._maxPayload = -1;\n      /**\n       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n       */\n      _this._pingTimeoutTime = Infinity;\n      if (uri && \"object\" === _typeof(uri)) {\n        opts = uri;\n        uri = null;\n      }\n      if (uri) {\n        var parsedUri = parse(uri);\n        opts.hostname = parsedUri.host;\n        opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n        opts.port = parsedUri.port;\n        if (parsedUri.query) opts.query = parsedUri.query;\n      } else if (opts.host) {\n        opts.hostname = parse(opts.host).host;\n      }\n      installTimerFunctions(_this, opts);\n      _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = _this.secure ? \"443\" : \"80\";\n      }\n      _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n      _this.transports = [];\n      _this._transportsByName = {};\n      opts.transports.forEach(function (t) {\n        var transportName = t.prototype.name;\n        _this.transports.push(transportName);\n        _this._transportsByName[transportName] = t;\n      });\n      _this.opts = _extends({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        addTrailingSlash: true,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: false\n      }, opts);\n      _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + (_this.opts.addTrailingSlash ? \"/\" : \"\");\n      if (typeof _this.opts.query === \"string\") {\n        _this.opts.query = decode(_this.opts.query);\n      }\n      if (withEventListeners) {\n        if (_this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          _this._beforeunloadEventListener = function () {\n            if (_this.transport) {\n              // silently close the transport\n              _this.transport.removeAllListeners();\n              _this.transport.close();\n            }\n          };\n          addEventListener(\"beforeunload\", _this._beforeunloadEventListener, false);\n        }\n        if (_this.hostname !== \"localhost\") {\n          _this._offlineEventListener = function () {\n            _this._onClose(\"transport close\", {\n              description: \"network connection lost\"\n            });\n          };\n          OFFLINE_EVENT_LISTENERS.push(_this._offlineEventListener);\n        }\n      }\n      if (_this.opts.withCredentials) {\n        _this._cookieJar = createCookieJar();\n      }\n      _this._open();\n      return _this;\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    _inheritsLoose(SocketWithoutUpgrade, _Emitter);\n    var _proto = SocketWithoutUpgrade.prototype;\n    _proto.createTransport = function createTransport(name) {\n      var query = _extends({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = protocol$1;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      var opts = _extends({}, this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */;\n    _proto._open = function _open() {\n      var _this2 = this;\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n      var transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      var transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */;\n    _proto.setTransport = function setTransport(transport) {\n      var _this3 = this;\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", function (reason) {\n        return _this3._onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */;\n    _proto.onOpen = function onOpen() {\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */;\n    _proto._onPacket = function _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this._sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            this._resetPingTimeout();\n            break;\n          case \"error\":\n            var err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this._onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */;\n    _proto.onHandshake = function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */;\n    _proto._resetPingTimeout = function _resetPingTimeout() {\n      var _this4 = this;\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      var delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this4._onClose(\"ping timeout\");\n      }, delay);\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */;\n    _proto._onDrain = function _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this._prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */;\n    _proto.flush = function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this._getWritablePackets();\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */;\n    _proto._getWritablePackets = function _getWritablePackets() {\n      var shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      var payloadSize = 1; // first packet type\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += byteLength(data);\n        }\n        if (i > 0 && payloadSize > this._maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */;\n    _proto._hasPingExpired = function _hasPingExpired() {\n      var _this5 = this;\n      if (!this._pingTimeoutTime) return true;\n      var hasExpired = Date.now() > this._pingTimeoutTime;\n      if (hasExpired) {\n        this._pingTimeoutTime = 0;\n        nextTick(function () {\n          _this5._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */;\n    _proto.write = function write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */;\n    _proto.send = function send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */;\n    _proto._sendPacket = function _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */;\n    _proto.close = function close() {\n      var _this6 = this;\n      var close = function close() {\n        _this6._onClose(\"forced close\");\n        _this6.transport.close();\n      };\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n        _this6.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */;\n    _proto._onError = function _onError(err) {\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        this.transports.shift();\n        return this._open();\n      }\n      this.emitReserved(\"error\", err);\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */;\n    _proto._onClose = function _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n          if (this._offlineEventListener) {\n            var i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n            if (i !== -1) {\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    };\n    return SocketWithoutUpgrade;\n  }(Emitter);\n  SocketWithoutUpgrade.protocol = protocol$1;\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see Socket\n   */\n  var SocketWithUpgrade = /*#__PURE__*/function (_SocketWithoutUpgrade) {\n    function SocketWithUpgrade() {\n      var _this7;\n      _this7 = _SocketWithoutUpgrade.apply(this, arguments) || this;\n      _this7._upgrades = [];\n      return _this7;\n    }\n    _inheritsLoose(SocketWithUpgrade, _SocketWithoutUpgrade);\n    var _proto2 = SocketWithUpgrade.prototype;\n    _proto2.onOpen = function onOpen() {\n      _SocketWithoutUpgrade.prototype.onOpen.call(this);\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        for (var i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */;\n    _proto2._probe = function _probe(name) {\n      var _this8 = this;\n      var transport = this.createTransport(name);\n      var failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            _this8.upgrading = true;\n            _this8.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n            _this8.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this8.readyState) return;\n              cleanup();\n              _this8.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              _this8.emitReserved(\"upgrade\", transport);\n              transport = null;\n              _this8.upgrading = false;\n              _this8.flush();\n            });\n          } else {\n            var err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            _this8.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        _this8.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        _this8.off(\"close\", onclose);\n        _this8.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(function () {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    };\n    _proto2.onHandshake = function onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n      _SocketWithoutUpgrade.prototype.onHandshake.call(this, data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */;\n    _proto2._filterUpgrades = function _filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      for (var i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    };\n    return SocketWithUpgrade;\n  }(SocketWithoutUpgrade);\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * @example\n   * import { Socket } from \"engine.io-client\";\n   *\n   * const socket = new Socket();\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see SocketWithUpgrade\n   */\n  var Socket$1 = /*#__PURE__*/function (_SocketWithUpgrade) {\n    function Socket(uri) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var o = _typeof(uri) === \"object\" ? uri : opts;\n      if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n        o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(function (transportName) {\n          return transports[transportName];\n        }).filter(function (t) {\n          return !!t;\n        });\n      }\n      return _SocketWithUpgrade.call(this, uri, o) || this;\n    }\n    _inheritsLoose(Socket, _SocketWithUpgrade);\n    return Socket;\n  }(SocketWithUpgrade);\n\n  Socket$1.protocol;\n\n  function getDefaultExportFromCjs (x) {\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  var browser = {exports: {}};\n\n  var ms;\n  var hasRequiredMs;\n  function requireMs() {\n    if (hasRequiredMs) return ms;\n    hasRequiredMs = 1;\n    var s = 1000;\n    var m = s * 60;\n    var h = m * 60;\n    var d = h * 24;\n    var w = d * 7;\n    var y = d * 365.25;\n\n    /**\n     * Parse or format the given `val`.\n     *\n     * Options:\n     *\n     *  - `long` verbose formatting [false]\n     *\n     * @param {String|Number} val\n     * @param {Object} [options]\n     * @throws {Error} throw an error if val is not a non-empty string or a number\n     * @return {String|Number}\n     * @api public\n     */\n\n    ms = function ms(val, options) {\n      options = options || {};\n      var type = _typeof(val);\n      if (type === 'string' && val.length > 0) {\n        return parse(val);\n      } else if (type === 'number' && isFinite(val)) {\n        return options[\"long\"] ? fmtLong(val) : fmtShort(val);\n      }\n      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\n    };\n\n    /**\n     * Parse the given `str` and return milliseconds.\n     *\n     * @param {String} str\n     * @return {Number}\n     * @api private\n     */\n\n    function parse(str) {\n      str = String(str);\n      if (str.length > 100) {\n        return;\n      }\n      var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);\n      if (!match) {\n        return;\n      }\n      var n = parseFloat(match[1]);\n      var type = (match[2] || 'ms').toLowerCase();\n      switch (type) {\n        case 'years':\n        case 'year':\n        case 'yrs':\n        case 'yr':\n        case 'y':\n          return n * y;\n        case 'weeks':\n        case 'week':\n        case 'w':\n          return n * w;\n        case 'days':\n        case 'day':\n        case 'd':\n          return n * d;\n        case 'hours':\n        case 'hour':\n        case 'hrs':\n        case 'hr':\n        case 'h':\n          return n * h;\n        case 'minutes':\n        case 'minute':\n        case 'mins':\n        case 'min':\n        case 'm':\n          return n * m;\n        case 'seconds':\n        case 'second':\n        case 'secs':\n        case 'sec':\n        case 's':\n          return n * s;\n        case 'milliseconds':\n        case 'millisecond':\n        case 'msecs':\n        case 'msec':\n        case 'ms':\n          return n;\n        default:\n          return undefined;\n      }\n    }\n\n    /**\n     * Short format for `ms`.\n     *\n     * @param {Number} ms\n     * @return {String}\n     * @api private\n     */\n\n    function fmtShort(ms) {\n      var msAbs = Math.abs(ms);\n      if (msAbs >= d) {\n        return Math.round(ms / d) + 'd';\n      }\n      if (msAbs >= h) {\n        return Math.round(ms / h) + 'h';\n      }\n      if (msAbs >= m) {\n        return Math.round(ms / m) + 'm';\n      }\n      if (msAbs >= s) {\n        return Math.round(ms / s) + 's';\n      }\n      return ms + 'ms';\n    }\n\n    /**\n     * Long format for `ms`.\n     *\n     * @param {Number} ms\n     * @return {String}\n     * @api private\n     */\n\n    function fmtLong(ms) {\n      var msAbs = Math.abs(ms);\n      if (msAbs >= d) {\n        return plural(ms, msAbs, d, 'day');\n      }\n      if (msAbs >= h) {\n        return plural(ms, msAbs, h, 'hour');\n      }\n      if (msAbs >= m) {\n        return plural(ms, msAbs, m, 'minute');\n      }\n      if (msAbs >= s) {\n        return plural(ms, msAbs, s, 'second');\n      }\n      return ms + ' ms';\n    }\n\n    /**\n     * Pluralization helper.\n     */\n\n    function plural(ms, msAbs, n, name) {\n      var isPlural = msAbs >= n * 1.5;\n      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n    }\n    return ms;\n  }\n\n  /**\n   * This is the common logic for both the Node.js and web browser\n   * implementations of `debug()`.\n   */\n\n  function setup(env) {\n    createDebug.debug = createDebug;\n    createDebug[\"default\"] = createDebug;\n    createDebug.coerce = coerce;\n    createDebug.disable = disable;\n    createDebug.enable = enable;\n    createDebug.enabled = enabled;\n    createDebug.humanize = requireMs();\n    createDebug.destroy = destroy;\n    Object.keys(env).forEach(function (key) {\n      createDebug[key] = env[key];\n    });\n\n    /**\n    * The currently active debug mode names, and names to skip.\n    */\n\n    createDebug.names = [];\n    createDebug.skips = [];\n\n    /**\n    * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n    *\n    * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n    */\n    createDebug.formatters = {};\n\n    /**\n    * Selects a color for a debug namespace\n    * @param {String} namespace The namespace string for the debug instance to be colored\n    * @return {Number|String} An ANSI color code for the given namespace\n    * @api private\n    */\n    function selectColor(namespace) {\n      var hash = 0;\n      for (var i = 0; i < namespace.length; i++) {\n        hash = (hash << 5) - hash + namespace.charCodeAt(i);\n        hash |= 0; // Convert to 32bit integer\n      }\n      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n    }\n    createDebug.selectColor = selectColor;\n\n    /**\n    * Create a debugger with the given `namespace`.\n    *\n    * @param {String} namespace\n    * @return {Function}\n    * @api public\n    */\n    function createDebug(namespace) {\n      var prevTime;\n      var enableOverride = null;\n      var namespacesCache;\n      var enabledCache;\n      function debug() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        // Disabled?\n        if (!debug.enabled) {\n          return;\n        }\n        var self = debug;\n\n        // Set `diff` timestamp\n        var curr = Number(new Date());\n        var ms = curr - (prevTime || curr);\n        self.diff = ms;\n        self.prev = prevTime;\n        self.curr = curr;\n        prevTime = curr;\n        args[0] = createDebug.coerce(args[0]);\n        if (typeof args[0] !== 'string') {\n          // Anything else let's inspect with %O\n          args.unshift('%O');\n        }\n\n        // Apply any `formatters` transformations\n        var index = 0;\n        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n          // If we encounter an escaped % then don't increase the array index\n          if (match === '%%') {\n            return '%';\n          }\n          index++;\n          var formatter = createDebug.formatters[format];\n          if (typeof formatter === 'function') {\n            var val = args[index];\n            match = formatter.call(self, val);\n\n            // Now we need to remove `args[index]` since it's inlined in the `format`\n            args.splice(index, 1);\n            index--;\n          }\n          return match;\n        });\n\n        // Apply env-specific formatting (colors, etc.)\n        createDebug.formatArgs.call(self, args);\n        var logFn = self.log || createDebug.log;\n        logFn.apply(self, args);\n      }\n      debug.namespace = namespace;\n      debug.useColors = createDebug.useColors();\n      debug.color = createDebug.selectColor(namespace);\n      debug.extend = extend;\n      debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n      Object.defineProperty(debug, 'enabled', {\n        enumerable: true,\n        configurable: false,\n        get: function get() {\n          if (enableOverride !== null) {\n            return enableOverride;\n          }\n          if (namespacesCache !== createDebug.namespaces) {\n            namespacesCache = createDebug.namespaces;\n            enabledCache = createDebug.enabled(namespace);\n          }\n          return enabledCache;\n        },\n        set: function set(v) {\n          enableOverride = v;\n        }\n      });\n\n      // Env-specific initialization logic for debug instances\n      if (typeof createDebug.init === 'function') {\n        createDebug.init(debug);\n      }\n      return debug;\n    }\n    function extend(namespace, delimiter) {\n      var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n      newDebug.log = this.log;\n      return newDebug;\n    }\n\n    /**\n    * Enables a debug mode by namespaces. This can include modes\n    * separated by a colon and wildcards.\n    *\n    * @param {String} namespaces\n    * @api public\n    */\n    function enable(namespaces) {\n      createDebug.save(namespaces);\n      createDebug.namespaces = namespaces;\n      createDebug.names = [];\n      createDebug.skips = [];\n      var i;\n      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n      var len = split.length;\n      for (i = 0; i < len; i++) {\n        if (!split[i]) {\n          // ignore empty strings\n          continue;\n        }\n        namespaces = split[i].replace(/\\*/g, '.*?');\n        if (namespaces[0] === '-') {\n          createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n        } else {\n          createDebug.names.push(new RegExp('^' + namespaces + '$'));\n        }\n      }\n    }\n\n    /**\n    * Disable debug output.\n    *\n    * @return {String} namespaces\n    * @api public\n    */\n    function disable() {\n      var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {\n        return '-' + namespace;\n      }))).join(',');\n      createDebug.enable('');\n      return namespaces;\n    }\n\n    /**\n    * Returns true if the given mode name is enabled, false otherwise.\n    *\n    * @param {String} name\n    * @return {Boolean}\n    * @api public\n    */\n    function enabled(name) {\n      if (name[name.length - 1] === '*') {\n        return true;\n      }\n      var i;\n      var len;\n      for (i = 0, len = createDebug.skips.length; i < len; i++) {\n        if (createDebug.skips[i].test(name)) {\n          return false;\n        }\n      }\n      for (i = 0, len = createDebug.names.length; i < len; i++) {\n        if (createDebug.names[i].test(name)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n    * Convert regexp to namespace\n    *\n    * @param {RegExp} regxep\n    * @return {String} namespace\n    * @api private\n    */\n    function toNamespace(regexp) {\n      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, '*');\n    }\n\n    /**\n    * Coerce `val`.\n    *\n    * @param {Mixed} val\n    * @return {Mixed}\n    * @api private\n    */\n    function coerce(val) {\n      if (val instanceof Error) {\n        return val.stack || val.message;\n      }\n      return val;\n    }\n\n    /**\n    * XXX DO NOT USE. This is a temporary stub function.\n    * XXX It WILL be removed in the next major release.\n    */\n    function destroy() {\n      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n    }\n    createDebug.enable(createDebug.load());\n    return createDebug;\n  }\n  var common = setup;\n\n  /* eslint-env browser */\n  browser.exports;\n  (function (module, exports) {\n    /**\n     * This is the web browser implementation of `debug()`.\n     */\n\n    exports.formatArgs = formatArgs;\n    exports.save = save;\n    exports.load = load;\n    exports.useColors = useColors;\n    exports.storage = localstorage();\n    exports.destroy = function () {\n      var warned = false;\n      return function () {\n        if (!warned) {\n          warned = true;\n          console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n        }\n      };\n    }();\n\n    /**\n     * Colors.\n     */\n\n    exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n\n    /**\n     * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n     * and the Firebug extension (any Firefox version) are known\n     * to support \"%c\" CSS customizations.\n     *\n     * TODO: add a `localStorage` variable to explicitly enable/disable colors\n     */\n\n    // eslint-disable-next-line complexity\n    function useColors() {\n      // NB: In an Electron preload script, document will be defined but not fully\n      // initialized. Since we know we're in Chrome, we'll just detect this case\n      // explicitly\n      if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n        return true;\n      }\n\n      // Internet Explorer and Edge do not support colors.\n      if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n        return false;\n      }\n\n      // Is webkit? http://stackoverflow.com/a/16459606/376773\n      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n      return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||\n      // Is firebug? http://stackoverflow.com/a/398120/376773\n      typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||\n      // Is firefox >= v31?\n      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||\n      // Double check webkit in userAgent just in case we are in a worker\n      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n    }\n\n    /**\n     * Colorize log arguments if enabled.\n     *\n     * @api public\n     */\n\n    function formatArgs(args) {\n      args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n      if (!this.useColors) {\n        return;\n      }\n      var c = 'color: ' + this.color;\n      args.splice(1, 0, c, 'color: inherit');\n\n      // The final \"%c\" is somewhat tricky, because there could be other\n      // arguments passed either before or after the %c, so we need to\n      // figure out the correct index to insert the CSS into\n      var index = 0;\n      var lastC = 0;\n      args[0].replace(/%[a-zA-Z%]/g, function (match) {\n        if (match === '%%') {\n          return;\n        }\n        index++;\n        if (match === '%c') {\n          // We only are interested in the *last* %c\n          // (the user may have provided their own)\n          lastC = index;\n        }\n      });\n      args.splice(lastC, 0, c);\n    }\n\n    /**\n     * Invokes `console.debug()` when available.\n     * No-op when `console.debug` is not a \"function\".\n     * If `console.debug` is not available, falls back\n     * to `console.log`.\n     *\n     * @api public\n     */\n    exports.log = console.debug || console.log || function () {};\n\n    /**\n     * Save `namespaces`.\n     *\n     * @param {String} namespaces\n     * @api private\n     */\n    function save(namespaces) {\n      try {\n        if (namespaces) {\n          exports.storage.setItem('debug', namespaces);\n        } else {\n          exports.storage.removeItem('debug');\n        }\n      } catch (error) {\n        // Swallow\n        // XXX (@Qix-) should we be logging these?\n      }\n    }\n\n    /**\n     * Load `namespaces`.\n     *\n     * @return {String} returns the previously persisted debug modes\n     * @api private\n     */\n    function load() {\n      var r;\n      try {\n        r = exports.storage.getItem('debug');\n      } catch (error) {\n        // Swallow\n        // XXX (@Qix-) should we be logging these?\n      }\n\n      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n      if (!r && typeof process !== 'undefined' && 'env' in process) {\n        r = process.env.DEBUG;\n      }\n      return r;\n    }\n\n    /**\n     * Localstorage attempts to return the localstorage.\n     *\n     * This is necessary because safari throws\n     * when a user disables cookies/localstorage\n     * and you attempt to access it.\n     *\n     * @return {LocalStorage}\n     * @api private\n     */\n\n    function localstorage() {\n      try {\n        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n        // The Browser also has localStorage in the global context.\n        return localStorage;\n      } catch (error) {\n        // Swallow\n        // XXX (@Qix-) should we be logging these?\n      }\n    }\n    module.exports = common(exports);\n    var formatters = module.exports.formatters;\n\n    /**\n     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n     */\n\n    formatters.j = function (v) {\n      try {\n        return JSON.stringify(v);\n      } catch (error) {\n        return '[UnexpectedJSONParseError]: ' + error.message;\n      }\n    };\n  })(browser, browser.exports);\n  var browserExports = browser.exports;\n  var debugModule = /*@__PURE__*/getDefaultExportFromCjs(browserExports);\n\n  var debug$3 = debugModule(\"socket.io-client:url\"); // debug()\n  /**\n   * URL parser.\n   *\n   * @param uri - url\n   * @param path - the request path of the connection\n   * @param loc - An object meant to mimic window.location.\n   *        Defaults to window.location.\n   * @public\n   */\n  function url(uri) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var loc = arguments.length > 2 ? arguments[2] : undefined;\n    var obj = uri;\n    // default to window.location\n    loc = loc || typeof location !== \"undefined\" && location;\n    if (null == uri) uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n      if (\"/\" === uri.charAt(0)) {\n        if (\"/\" === uri.charAt(1)) {\n          uri = loc.protocol + uri;\n        } else {\n          uri = loc.host + uri;\n        }\n      }\n      if (!/^(https?|wss?):\\/\\//.test(uri)) {\n        debug$3(\"protocol-less url %s\", uri);\n        if (\"undefined\" !== typeof loc) {\n          uri = loc.protocol + \"//\" + uri;\n        } else {\n          uri = \"https://\" + uri;\n        }\n      }\n      // parse\n      debug$3(\"parse %s\", uri);\n      obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n      if (/^(http|ws)$/.test(obj.protocol)) {\n        obj.port = \"80\";\n      } else if (/^(http|ws)s$/.test(obj.protocol)) {\n        obj.port = \"443\";\n      }\n    }\n    obj.path = obj.path || \"/\";\n    var ipv6 = obj.host.indexOf(\":\") !== -1;\n    var host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n  }\n\n  var withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n  var isView = function isView(obj) {\n    return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;\n  };\n  var toString = Object.prototype.toString;\n  var withNativeBlob = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && toString.call(Blob) === \"[object BlobConstructor]\";\n  var withNativeFile = typeof File === \"function\" || typeof File !== \"undefined\" && toString.call(File) === \"[object FileConstructor]\";\n  /**\n   * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n   *\n   * @private\n   */\n  function isBinary(obj) {\n    return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;\n  }\n  function hasBinary(obj, toJSON) {\n    if (!obj || _typeof(obj) !== \"object\") {\n      return false;\n    }\n    if (Array.isArray(obj)) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (hasBinary(obj[i])) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (isBinary(obj)) {\n      return true;\n    }\n    if (obj.toJSON && typeof obj.toJSON === \"function\" && arguments.length === 1) {\n      return hasBinary(obj.toJSON(), true);\n    }\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n   *\n   * @param {Object} packet - socket.io event packet\n   * @return {Object} with deconstructed packet and list of buffers\n   * @public\n   */\n  function deconstructPacket(packet) {\n    var buffers = [];\n    var packetData = packet.data;\n    var pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return {\n      packet: pack,\n      buffers: buffers\n    };\n  }\n  function _deconstructPacket(data, buffers) {\n    if (!data) return data;\n    if (isBinary(data)) {\n      var placeholder = {\n        _placeholder: true,\n        num: buffers.length\n      };\n      buffers.push(data);\n      return placeholder;\n    } else if (Array.isArray(data)) {\n      var newData = new Array(data.length);\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i], buffers);\n      }\n      return newData;\n    } else if (_typeof(data) === \"object\" && !(data instanceof Date)) {\n      var _newData = {};\n      for (var key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n          _newData[key] = _deconstructPacket(data[key], buffers);\n        }\n      }\n      return _newData;\n    }\n    return data;\n  }\n  /**\n   * Reconstructs a binary packet from its placeholder packet and buffers\n   *\n   * @param {Object} packet - event packet with placeholders\n   * @param {Array} buffers - binary buffers to put in placeholder positions\n   * @return {Object} reconstructed packet\n   * @public\n   */\n  function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n  }\n  function _reconstructPacket(data, buffers) {\n    if (!data) return data;\n    if (data && data._placeholder === true) {\n      var isIndexValid = typeof data.num === \"number\" && data.num >= 0 && data.num < buffers.length;\n      if (isIndexValid) {\n        return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n      } else {\n        throw new Error(\"illegal attachments\");\n      }\n    } else if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i], buffers);\n      }\n    } else if (_typeof(data) === \"object\") {\n      for (var key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n          data[key] = _reconstructPacket(data[key], buffers);\n        }\n      }\n    }\n    return data;\n  }\n\n  /**\n   * These strings must not be used as event names, as they have a special meaning.\n   */\n  var RESERVED_EVENTS$1 = [\"connect\",\n  // used on the client side\n  \"connect_error\",\n  // used on the client side\n  \"disconnect\",\n  // used on both sides\n  \"disconnecting\",\n  // used on the server side\n  \"newListener\",\n  // used by the Node.js EventEmitter\n  \"removeListener\" // used by the Node.js EventEmitter\n  ];\n  /**\n   * Protocol version.\n   *\n   * @public\n   */\n  var protocol = 5;\n  var PacketType;\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (PacketType = {}));\n  /**\n   * A socket.io Encoder instance\n   */\n  var Encoder = /*#__PURE__*/function () {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    function Encoder(replacer) {\n      this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    var _proto = Encoder.prototype;\n    _proto.encode = function encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (hasBinary(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */;\n    _proto.encodeAsString = function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */;\n    _proto.encodeAsBinary = function encodeAsBinary(obj) {\n      var deconstruction = deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    };\n    return Encoder;\n  }();\n  /**\n   * A socket.io Decoder instance\n   *\n   * @return {Object} decoder\n   */\n  var Decoder = /*#__PURE__*/function (_Emitter) {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    function Decoder(reviver) {\n      var _this;\n      _this = _Emitter.call(this) || this;\n      _this.reviver = reviver;\n      return _this;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    _inheritsLoose(Decoder, _Emitter);\n    var _proto2 = Decoder.prototype;\n    _proto2.add = function add(obj) {\n      var packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        var isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            _Emitter.prototype.emitReserved.call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _Emitter.prototype.emitReserved.call(this, \"decoded\", packet);\n        }\n      } else if (isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            _Emitter.prototype.emitReserved.call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */;\n    _proto2.decodeString = function decodeString(str) {\n      var i = 0;\n      // look up type\n      var p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        var buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      var next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n        while (++i) {\n          var _c = str.charAt(i);\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(_start2, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        var payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      return p;\n    };\n    _proto2.tryParse = function tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    };\n    Decoder.isPayloadValid = function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return isObject(payload);\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || isObject(payload);\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS$1.indexOf(payload[0]) === -1);\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n    /**\n     * Deallocates a parser's resources\n     */;\n    _proto2.destroy = function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    };\n    return Decoder;\n  }(Emitter);\n  /**\n   * A manager of a binary event's 'buffer sequence'. Should\n   * be constructed whenever a packet of type BINARY_EVENT is\n   * decoded.\n   *\n   * @param {Object} packet\n   * @return {BinaryReconstructor} initialized reconstructor\n   */\n  var BinaryReconstructor = /*#__PURE__*/function () {\n    function BinaryReconstructor(packet) {\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    var _proto3 = BinaryReconstructor.prototype;\n    _proto3.takeBinaryData = function takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */;\n    _proto3.finishedReconstruction = function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    };\n    return BinaryReconstructor;\n  }();\n  function isNamespaceValid(nsp) {\n    return typeof nsp === \"string\";\n  }\n  // see https://caniuse.com/mdn-javascript_builtins_number_isinteger\n  var isInteger = Number.isInteger || function (value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n  };\n  function isAckIdValid(id) {\n    return id === undefined || isInteger(id);\n  }\n  // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n  function isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n  }\n  function isDataValid(type, payload) {\n    switch (type) {\n      case PacketType.CONNECT:\n        return payload === undefined || isObject(payload);\n      case PacketType.DISCONNECT:\n        return payload === undefined;\n      case PacketType.EVENT:\n        return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS$1.indexOf(payload[0]) === -1);\n      case PacketType.ACK:\n        return Array.isArray(payload);\n      case PacketType.CONNECT_ERROR:\n        return typeof payload === \"string\" || isObject(payload);\n      default:\n        return false;\n    }\n  }\n  function isPacketValid(packet) {\n    return isNamespaceValid(packet.nsp) && isAckIdValid(packet.id) && isDataValid(packet.type, packet.data);\n  }\n\n  var parser = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    protocol: protocol,\n    get PacketType () { return PacketType; },\n    Encoder: Encoder,\n    Decoder: Decoder,\n    isPacketValid: isPacketValid\n  });\n\n  function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n      obj.off(ev, fn);\n    };\n  }\n\n  var debug$2 = debugModule(\"socket.io-client:socket\"); // debug()\n  /**\n   * Internal events.\n   * These events can't be emitted by the user.\n   */\n  var RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1\n  });\n  /**\n   * A Socket is the fundamental class for interacting with the server.\n   *\n   * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(\"connected\");\n   * });\n   *\n   * // send an event to the server\n   * socket.emit(\"foo\", \"bar\");\n   *\n   * socket.on(\"foobar\", () => {\n   *   // an event was received from the server\n   * });\n   *\n   * // upon disconnection\n   * socket.on(\"disconnect\", (reason) => {\n   *   console.log(`disconnected due to ${reason}`);\n   * });\n   */\n  var Socket = /*#__PURE__*/function (_Emitter) {\n    /**\n     * `Socket` constructor.\n     */\n    function Socket(io, nsp, opts) {\n      var _this;\n      _this = _Emitter.call(this) || this;\n      /**\n       * Whether the socket is currently connected to the server.\n       *\n       * @example\n       * const socket = io();\n       *\n       * socket.on(\"connect\", () => {\n       *   console.log(socket.connected); // true\n       * });\n       *\n       * socket.on(\"disconnect\", () => {\n       *   console.log(socket.connected); // false\n       * });\n       */\n      _this.connected = false;\n      /**\n       * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n       * be transmitted by the server.\n       */\n      _this.recovered = false;\n      /**\n       * Buffer for packets received before the CONNECT packet\n       */\n      _this.receiveBuffer = [];\n      /**\n       * Buffer for packets that will be sent once the socket is connected\n       */\n      _this.sendBuffer = [];\n      /**\n       * The queue of packets to be sent with retry in case of failure.\n       *\n       * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n       * @private\n       */\n      _this._queue = [];\n      /**\n       * A sequence to generate the ID of the {@link QueuedPacket}.\n       * @private\n       */\n      _this._queueSeq = 0;\n      _this.ids = 0;\n      /**\n       * A map containing acknowledgement handlers.\n       *\n       * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n       *\n       * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n       * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n       * - `const value = await socket.emitWithAck(\"test\")`\n       *\n       * From those that don't:\n       *\n       * - `socket.emit(\"test\", (value) => { ... });`\n       *\n       * In the first case, the handlers will be called with an error when:\n       *\n       * - the timeout is reached\n       * - the socket gets disconnected\n       *\n       * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n       * an acknowledgement from the server.\n       *\n       * @private\n       */\n      _this.acks = {};\n      _this.flags = {};\n      _this.io = io;\n      _this.nsp = nsp;\n      if (opts && opts.auth) {\n        _this.auth = opts.auth;\n      }\n      _this._opts = _extends({}, opts);\n      if (_this.io._autoConnect) _this.open();\n      return _this;\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    _inheritsLoose(Socket, _Emitter);\n    var _proto = Socket.prototype;\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    _proto.subEvents = function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */;\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    _proto.connect = function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */;\n    _proto.open = function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */;\n    _proto.send = function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */;\n    _proto.emit = function emit(ev) {\n      var _a, _b, _c;\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags[\"volatile\"]) {\n        this._addToQueue(args);\n        return this;\n      }\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        debug$2(\"emitting packet with ack id %d\", id);\n        var ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      var isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n      var isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n      var discardPacket = this.flags[\"volatile\"] && !isTransportWritable;\n      if (discardPacket) {\n        debug$2(\"discard packet as the transport is not currently writable\");\n      } else if (isConnected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */;\n    _proto._registerAckCallback = function _registerAckCallback(id, ack) {\n      var _this2 = this;\n      var _a;\n      var timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            debug$2(\"removing packet with ack id %d from the buffer\", id);\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n        debug$2(\"event with ack id %d has timed out after %d ms\", id, timeout);\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      var fn = function fn() {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        ack.apply(_this2, args);\n      };\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */;\n    _proto.emitWithAck = function emitWithAck(ev) {\n      var _this3 = this;\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n      return new Promise(function (resolve, reject) {\n        var fn = function fn(arg1, arg2) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n        fn.withError = true;\n        args.push(fn);\n        _this3.emit.apply(_this3, [ev].concat(args));\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */;\n    _proto._addToQueue = function _addToQueue(args) {\n      var _this4 = this;\n      var ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      var packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args: args,\n        flags: _extends({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push(function (err) {\n        if (packet !== _this4._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        var hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > _this4._opts.retries) {\n            debug$2(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n            _this4._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          debug$2(\"packet [%d] was successfully sent\", packet.id);\n          _this4._queue.shift();\n          if (ack) {\n            for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n              responseArgs[_key5 - 1] = arguments[_key5];\n            }\n            ack.apply(void 0, [null].concat(responseArgs));\n          }\n        }\n        packet.pending = false;\n        return _this4._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */;\n    _proto._drainQueue = function _drainQueue() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      debug$2(\"draining queue\");\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      var packet = this._queue[0];\n      if (packet.pending && !force) {\n        debug$2(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      debug$2(\"sending packet [%d] (try n°%d)\", packet.id, packet.tryCount);\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */;\n    _proto.packet = function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */;\n    _proto.onopen = function onopen() {\n      var _this5 = this;\n      debug$2(\"transport is open - connecting\");\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this5._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */;\n    _proto._sendConnectPacket = function _sendConnectPacket(data) {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this._pid ? _extends({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */;\n    _proto.onerror = function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */;\n    _proto.onclose = function onclose(reason, description) {\n      debug$2(\"close (%s)\", reason);\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */;\n    _proto._clearAcks = function _clearAcks() {\n      var _this6 = this;\n      Object.keys(this.acks).forEach(function (id) {\n        var isBuffered = _this6.sendBuffer.some(function (packet) {\n          return String(packet.id) === id;\n        });\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          var ack = _this6.acks[id];\n          delete _this6.acks[id];\n          if (ack.withError) {\n            ack.call(_this6, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */;\n    _proto.onpacket = function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */;\n    _proto.onevent = function onevent(packet) {\n      var args = packet.data || [];\n      debug$2(\"emitting event %j\", args);\n      if (null != packet.id) {\n        debug$2(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    };\n    _proto.emitEvent = function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _Emitter.prototype.emit.apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */;\n    _proto.ack = function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n        debug$2(\"sending ack %j\", args);\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */;\n    _proto.onack = function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (typeof ack !== \"function\") {\n        debug$2(\"bad ack %s\", packet.id);\n        return;\n      }\n      delete this.acks[packet.id];\n      debug$2(\"calling ack %s with %j\", packet.id, packet.data);\n      // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n      if (ack.withError) {\n        packet.data.unshift(null);\n      }\n      // @ts-ignore\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */;\n    _proto.onconnect = function onconnect(id, pid) {\n      debug$2(\"socket connected with id %s\", id);\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */;\n    _proto.emitBuffered = function emitBuffered() {\n      var _this7 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this7.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this7.notifyOutgoingListeners(packet);\n        _this7.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */;\n    _proto.ondisconnect = function ondisconnect() {\n      debug$2(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */;\n    _proto.destroy = function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */;\n    _proto.disconnect = function disconnect() {\n      if (this.connected) {\n        debug$2(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */;\n    _proto.close = function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */;\n    _proto.compress = function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */;\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    _proto.timeout = function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */;\n    _proto.onAny = function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */;\n    _proto.prependAny = function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */;\n    _proto.offAny = function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */;\n    _proto.listenersAny = function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */;\n    _proto.onAnyOutgoing = function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */;\n    _proto.prependAnyOutgoing = function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */;\n    _proto.offAnyOutgoing = function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */;\n    _proto.listenersAnyOutgoing = function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */;\n    _proto.notifyOutgoingListeners = function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    };\n    return _createClass(Socket, [{\n      key: \"disconnected\",\n      get: function get() {\n        return !this.connected;\n      }\n    }, {\n      key: \"active\",\n      get: function get() {\n        return !!this.subs;\n      }\n    }, {\n      key: \"volatile\",\n      get: function get() {\n        this.flags[\"volatile\"] = true;\n        return this;\n      }\n    }]);\n  }(Emitter);\n\n  /**\n   * Initialize backoff timer with `opts`.\n   *\n   * - `min` initial timeout in milliseconds [100]\n   * - `max` max timeout [10000]\n   * - `jitter` [0]\n   * - `factor` [2]\n   *\n   * @param {Object} opts\n   * @api public\n   */\n  function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n  }\n  /**\n   * Return the backoff duration.\n   *\n   * @return {Number}\n   * @api public\n   */\n  Backoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n      var rand = Math.random();\n      var deviation = Math.floor(rand * this.jitter * ms);\n      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n  };\n  /**\n   * Reset the number of attempts.\n   *\n   * @api public\n   */\n  Backoff.prototype.reset = function () {\n    this.attempts = 0;\n  };\n  /**\n   * Set the minimum duration\n   *\n   * @api public\n   */\n  Backoff.prototype.setMin = function (min) {\n    this.ms = min;\n  };\n  /**\n   * Set the maximum duration\n   *\n   * @api public\n   */\n  Backoff.prototype.setMax = function (max) {\n    this.max = max;\n  };\n  /**\n   * Set the jitter\n   *\n   * @api public\n   */\n  Backoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n  };\n\n  var debug$1 = debugModule(\"socket.io-client:manager\"); // debug()\n  var Manager = /*#__PURE__*/function (_Emitter) {\n    function Manager(uri, opts) {\n      var _this;\n      var _a;\n      _this = _Emitter.call(this) || this;\n      _this.nsps = {};\n      _this.subs = [];\n      if (uri && \"object\" === _typeof(uri)) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      _this.opts = opts;\n      installTimerFunctions(_this, opts);\n      _this.reconnection(opts.reconnection !== false);\n      _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      _this.backoff = new Backoff({\n        min: _this.reconnectionDelay(),\n        max: _this.reconnectionDelayMax(),\n        jitter: _this.randomizationFactor()\n      });\n      _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      _this._readyState = \"closed\";\n      _this.uri = uri;\n      var _parser = opts.parser || parser;\n      _this.encoder = new _parser.Encoder();\n      _this.decoder = new _parser.Decoder();\n      _this._autoConnect = opts.autoConnect !== false;\n      if (_this._autoConnect) _this.open();\n      return _this;\n    }\n    _inheritsLoose(Manager, _Emitter);\n    var _proto = Manager.prototype;\n    _proto.reconnection = function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      if (!v) {\n        this.skipReconnect = true;\n      }\n      return this;\n    };\n    _proto.reconnectionAttempts = function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    };\n    _proto.reconnectionDelay = function reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    };\n    _proto.randomizationFactor = function randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    };\n    _proto.reconnectionDelayMax = function reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    };\n    _proto.timeout = function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */;\n    _proto.maybeReconnectOnOpen = function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */;\n    _proto.open = function open(fn) {\n      var _this2 = this;\n      debug$1(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug$1(\"opening %s\", this.uri);\n      this.engine = new Socket$1(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      var openSubDestroy = on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      var onError = function onError(err) {\n        debug$1(\"error\");\n        _this2.cleanup();\n        _this2._readyState = \"closed\";\n        _this2.emitReserved(\"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          _this2.maybeReconnectOnOpen();\n        }\n      };\n      // emit `error`\n      var errorSub = on(socket, \"error\", onError);\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n        debug$1(\"connect attempt will timeout after %d\", timeout);\n        // set timer\n        var timer = this.setTimeoutFn(function () {\n          debug$1(\"connect attempt timed out after %d\", timeout);\n          openSubDestroy();\n          onError(new Error(\"timeout\"));\n          socket.close();\n        }, timeout);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(function () {\n          _this2.clearTimeoutFn(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */;\n    _proto.connect = function connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */;\n    _proto.onopen = function onopen() {\n      debug$1(\"open\");\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      this.emitReserved(\"open\");\n      // add new subs\n      var socket = this.engine;\n      this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)),\n      // @ts-ignore\n      on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */;\n    _proto.onping = function onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */;\n    _proto.ondata = function ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */;\n    _proto.ondecoded = function ondecoded(packet) {\n      var _this3 = this;\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      nextTick(function () {\n        _this3.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */;\n    _proto.onerror = function onerror(err) {\n      debug$1(\"error\", err);\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */;\n    _proto.socket = function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      } else if (this._autoConnect && !socket.active) {\n        socket.connect();\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */;\n    _proto._destroy = function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n        if (_socket.active) {\n          debug$1(\"socket %s is still active, skipping close\", nsp);\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */;\n    _proto._packet = function _packet(packet) {\n      debug$1(\"writing packet %j\", packet);\n      var encodedPackets = this.encoder.encode(packet);\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */;\n    _proto.cleanup = function cleanup() {\n      debug$1(\"cleanup\");\n      this.subs.forEach(function (subDestroy) {\n        return subDestroy();\n      });\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */;\n    _proto._close = function _close() {\n      debug$1(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */;\n    _proto.disconnect = function disconnect() {\n      return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */;\n    _proto.onclose = function onclose(reason, description) {\n      var _a;\n      debug$1(\"closed due to %s\", reason);\n      this.cleanup();\n      (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */;\n    _proto.reconnect = function reconnect() {\n      var _this4 = this;\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug$1(\"reconnect failed\");\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        debug$1(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        var timer = this.setTimeoutFn(function () {\n          if (self.skipReconnect) return;\n          debug$1(\"attempting reconnect\");\n          _this4.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              debug$1(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n              _this4.emitReserved(\"reconnect_error\", err);\n            } else {\n              debug$1(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(function () {\n          _this4.clearTimeoutFn(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */;\n    _proto.onreconnect = function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    };\n    return Manager;\n  }(Emitter);\n\n  var debug = debugModule(\"socket.io-client\"); // debug()\n  /**\n   * Managers cache.\n   */\n  var cache = {};\n  function lookup(uri, opts) {\n    if (_typeof(uri) === \"object\") {\n      opts = uri;\n      uri = undefined;\n    }\n    opts = opts || {};\n    var parsed = url(uri, opts.path || \"/socket.io\");\n    var source = parsed.source;\n    var id = parsed.id;\n    var path = parsed.path;\n    var sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    var newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n    var io;\n    if (newConnection) {\n      debug(\"ignoring socket cache for %s\", source);\n      io = new Manager(source, opts);\n    } else {\n      if (!cache[id]) {\n        debug(\"new io instance for %s\", source);\n        cache[id] = new Manager(source, opts);\n      }\n      io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n      opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n  }\n  // so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n  // namespace (e.g. `io.connect(...)`), for backward compatibility\n  _extends(lookup, {\n    Manager: Manager,\n    Socket: Socket,\n    io: lookup,\n    connect: lookup\n  });\n\n  return lookup;\n\n}));\n//# sourceMappingURL=socket.io.js.map\n",
      "functions": [
        {
          "functionName": "_typeof",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 5047,
              "endOffset": 5090,
              "count": 14
            }
          ]
        },
        {
          "functionName": "isView",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 7256,
              "endOffset": 7404,
              "count": 3
            }
          ]
        },
        {
          "functionName": "encodePacket",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 7427,
              "endOffset": 8041,
              "count": 3
            }
          ]
        },
        {
          "functionName": "decodePacket",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 10486,
              "endOffset": 11163,
              "count": 3
            }
          ]
        },
        {
          "functionName": "encodePayload",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 12235,
              "endOffset": 12787,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 12493,
              "endOffset": 12781,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 12600,
              "endOffset": 12773,
              "count": 1
            }
          ]
        },
        {
          "functionName": "decodePayload",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 12811,
              "endOffset": 13200,
              "count": 1
            }
          ]
        },
        {
          "functionName": "Emitter",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 17725,
              "endOffset": 17784,
              "count": 1
            }
          ]
        },
        {
          "functionName": "Emitter.on.Emitter.addEventListener",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 18254,
              "endOffset": 18424,
              "count": 8
            }
          ]
        },
        {
          "functionName": "Emitter.once",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 18663,
              "endOffset": 18832,
              "count": 2
            }
          ]
        },
        {
          "functionName": "on",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 18690,
              "endOffset": 18771,
              "count": 4
            }
          ]
        },
        {
          "functionName": "Emitter.off.Emitter.removeListener.Emitter.removeAllListeners.Emitter.removeEventListener",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 19163,
              "endOffset": 19997,
              "count": 10
            }
          ]
        },
        {
          "functionName": "Emitter.emit",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 20158,
              "endOffset": 20602,
              "count": 31
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 21408,
              "endOffset": 21474,
              "count": 3
            }
          ]
        },
        {
          "functionName": "pick",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 21896,
              "endOffset": 22221,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 22100,
              "endOffset": 22211,
              "count": 9
            }
          ]
        },
        {
          "functionName": "installTimerFunctions",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 22424,
              "endOffset": 22808,
              "count": 1
            }
          ]
        },
        {
          "functionName": "randomString",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 23658,
              "endOffset": 23781,
              "count": 1
            }
          ]
        },
        {
          "functionName": "encode",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 23974,
              "endOffset": 24217,
              "count": 1
            }
          ]
        },
        {
          "functionName": "send",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 26511,
              "endOffset": 26618,
              "count": 3
            }
          ]
        },
        {
          "functionName": "onData",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 26964,
              "endOffset": 27085,
              "count": 2
            }
          ]
        },
        {
          "functionName": "onPacket",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 27187,
              "endOffset": 27288,
              "count": 3
            }
          ]
        },
        {
          "functionName": "createUri",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 27707,
              "endOffset": 27932,
              "count": 1
            }
          ]
        },
        {
          "functionName": "_hostname",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 27957,
              "endOffset": 28103,
              "count": 1
            }
          ]
        },
        {
          "functionName": "_port",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 28124,
              "endOffset": 28365,
              "count": 1
            }
          ]
        },
        {
          "functionName": "_query",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 28387,
              "endOffset": 28517,
              "count": 1
            }
          ]
        },
        {
          "functionName": "pause",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 29239,
              "endOffset": 29843,
              "count": 1
            },
            {
              "startOffset": 29452,
              "endOffset": 29469,
              "count": 0
            },
            {
              "startOffset": 29805,
              "endOffset": 29837,
              "count": 0
            }
          ]
        },
        {
          "functionName": "pause",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 29343,
              "endOffset": 29426,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 29580,
              "endOffset": 29637,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 29728,
              "endOffset": 29785,
              "count": 1
            },
            {
              "startOffset": 29762,
              "endOffset": 29772,
              "count": 0
            }
          ]
        },
        {
          "functionName": "onData",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 30145,
              "endOffset": 31143,
              "count": 1
            }
          ]
        },
        {
          "functionName": "callback",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 30215,
              "endOffset": 30754,
              "count": 1
            }
          ]
        },
        {
          "functionName": "write",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 31754,
              "endOffset": 32025,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 31863,
              "endOffset": 32017,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 31910,
              "endOffset": 32007,
              "count": 2
            }
          ]
        },
        {
          "functionName": "uri",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 32120,
              "endOffset": 32507,
              "count": 1
            }
          ]
        },
        {
          "functionName": "get",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 32575,
              "endOffset": 32625,
              "count": 1
            }
          ]
        },
        {
          "functionName": "doWrite",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 33877,
              "endOffset": 34175,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 34066,
              "endOffset": 34167,
              "count": 0
            }
          ]
        },
        {
          "functionName": "Request",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 34732,
              "endOffset": 35138,
              "count": 1
            }
          ]
        },
        {
          "functionName": "_create",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 35329,
              "endOffset": 37942,
              "count": 1
            }
          ]
        },
        {
          "functionName": "xhr.onreadystatechange",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 36692,
              "endOffset": 37399,
              "count": 9
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 37265,
              "endOffset": 37372,
              "count": 0
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 37708,
              "endOffset": 37761,
              "count": 0
            }
          ]
        },
        {
          "functionName": "_cleanup",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 38227,
              "endOffset": 38619,
              "count": 3
            }
          ]
        },
        {
          "functionName": "_onLoad",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 38707,
              "endOffset": 38913,
              "count": 3
            }
          ]
        },
        {
          "functionName": "request",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 40567,
              "endOffset": 40802,
              "count": 1
            }
          ]
        },
        {
          "functionName": "newRequest",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 40836,
              "endOffset": 41247,
              "count": 1
            }
          ]
        },
        {
          "functionName": "ws.onmessage",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 42980,
              "endOffset": 43041,
              "count": 2
            }
          ]
        },
        {
          "functionName": "write",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 43169,
              "endOffset": 44195,
              "count": 2
            }
          ]
        },
        {
          "functionName": "_loop",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 43356,
              "endOffset": 44114,
              "count": 2
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 43511,
              "endOffset": 44104,
              "count": 2
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 43950,
              "endOffset": 44059,
              "count": 2
            }
          ]
        },
        {
          "functionName": "get",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 44957,
              "endOffset": 45009,
              "count": 4
            }
          ]
        },
        {
          "functionName": "doWrite",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 45863,
              "endOffset": 45928,
              "count": 2
            }
          ]
        },
        {
          "functionName": "setTransport",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 58677,
              "endOffset": 59152,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 59058,
              "endOffset": 59144,
              "count": 0
            }
          ]
        },
        {
          "functionName": "_onPacket",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 59546,
              "endOffset": 60497,
              "count": 2
            }
          ]
        },
        {
          "functionName": "_onDrain",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 61725,
              "endOffset": 62151,
              "count": 4
            }
          ]
        },
        {
          "functionName": "flush",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 62239,
              "endOffset": 62671,
              "count": 3
            }
          ]
        },
        {
          "functionName": "_getWritablePackets",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 62880,
              "endOffset": 63545,
              "count": 2
            }
          ]
        },
        {
          "functionName": "_hasPingExpired",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 63967,
              "endOffset": 64329,
              "count": 1
            },
            {
              "startOffset": 64055,
              "endOffset": 64067,
              "count": 0
            },
            {
              "startOffset": 64149,
              "endOffset": 64298,
              "count": 0
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 64203,
              "endOffset": 64269,
              "count": 0
            }
          ]
        },
        {
          "functionName": "write",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 64554,
              "endOffset": 64666,
              "count": 1
            }
          ]
        },
        {
          "functionName": "_sendPacket",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 65273,
              "endOffset": 65938,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 71050,
              "endOffset": 72059,
              "count": 1
            },
            {
              "startOffset": 71089,
              "endOffset": 71096,
              "count": 0
            },
            {
              "startOffset": 71280,
              "endOffset": 71287,
              "count": 0
            },
            {
              "startOffset": 71858,
              "endOffset": 72049,
              "count": 0
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 71412,
              "endOffset": 71844,
              "count": 1
            },
            {
              "startOffset": 71452,
              "endOffset": 71459,
              "count": 0
            },
            {
              "startOffset": 71510,
              "endOffset": 71517,
              "count": 0
            }
          ]
        },
        {
          "functionName": "onupgrade",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 72880,
              "endOffset": 73006,
              "count": 1
            },
            {
              "startOffset": 72958,
              "endOffset": 72998,
              "count": 0
            }
          ]
        },
        {
          "functionName": "cleanup",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 73086,
              "endOffset": 73368,
              "count": 1
            }
          ]
        },
        {
          "functionName": "debug",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 81593,
              "endOffset": 83158,
              "count": 2
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 82391,
              "endOffset": 82960,
              "count": 0
            }
          ]
        },
        {
          "functionName": "get",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 83549,
              "endOffset": 83879,
              "count": 2
            }
          ]
        },
        {
          "functionName": "isView",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 95986,
              "endOffset": 96127,
              "count": 3
            }
          ]
        },
        {
          "functionName": "isBinary",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 96550,
              "endOffset": 96741,
              "count": 3
            }
          ]
        },
        {
          "functionName": "hasBinary",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 96744,
              "endOffset": 97381,
              "count": 14
            }
          ]
        },
        {
          "functionName": "encode",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 101501,
              "endOffset": 101921,
              "count": 1
            }
          ]
        },
        {
          "functionName": "encodeAsString",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 101999,
              "endOffset": 102661,
              "count": 1
            }
          ]
        },
        {
          "functionName": "add",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 103834,
              "endOffset": 105261,
              "count": 1
            }
          ]
        },
        {
          "functionName": "decodeString",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 105413,
              "endOffset": 107093,
              "count": 1
            }
          ]
        },
        {
          "functionName": "tryParse",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 107118,
              "endOffset": 107256,
              "count": 1
            }
          ]
        },
        {
          "functionName": "isPayloadValid",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 107287,
              "endOffset": 107948,
              "count": 1
            }
          ]
        },
        {
          "functionName": "emit",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 118070,
              "endOffset": 119716,
              "count": 1
            }
          ]
        },
        {
          "functionName": "packet",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 124482,
              "endOffset": 124576,
              "count": 1
            }
          ]
        },
        {
          "functionName": "onpacket",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 126840,
              "endOffset": 127996,
              "count": 1
            }
          ]
        },
        {
          "functionName": "onevent",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 128114,
              "endOffset": 128490,
              "count": 1
            },
            {
              "startOffset": 128170,
              "endOffset": 128175,
              "count": 0
            },
            {
              "startOffset": 128248,
              "endOffset": 128349,
              "count": 0
            },
            {
              "startOffset": 128415,
              "endOffset": 128484,
              "count": 0
            }
          ]
        },
        {
          "functionName": "emitEvent",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 128515,
              "endOffset": 129215,
              "count": 1
            },
            {
              "startOffset": 128571,
              "endOffset": 128599,
              "count": 0
            },
            {
              "startOffset": 128601,
              "endOffset": 129019,
              "count": 0
            },
            {
              "startOffset": 129089,
              "endOffset": 129103,
              "count": 0
            },
            {
              "startOffset": 129104,
              "endOffset": 129148,
              "count": 0
            },
            {
              "startOffset": 129150,
              "endOffset": 129209,
              "count": 0
            }
          ]
        },
        {
          "functionName": "notifyOutgoingListeners",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 139170,
              "endOffset": 139735,
              "count": 1
            }
          ]
        },
        {
          "functionName": "ondata",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 147760,
              "endOffset": 147901,
              "count": 1
            }
          ]
        },
        {
          "functionName": "ondecoded",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 148015,
              "endOffset": 148317,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 148222,
              "endOffset": 148290,
              "count": 1
            }
          ]
        },
        {
          "functionName": "_packet",
          "isBlockCoverage": false,
          "ranges": [
            {
              "startOffset": 149509,
              "endOffset": 149767,
              "count": 1
            }
          ]
        }
      ]
    },
    {
      "url": "http://localhost:3000/scripts/managerSocket.js",
      "scriptId": "6",
      "source": "\r\n\r\nconst form = document.getElementById('form');\r\nconst input = document.getElementById('input');\r\nconst inbox = document.querySelector('.message_container');\r\n\r\nclientData = {\r\n    userId: user._id,\r\n    Name: user.Username,\r\n    Role: user.role,\r\n    roomId: user._id\r\n}\r\n\r\nform.addEventListener('submit',function(event){\r\n    event.preventDefault();\r\n    const msg = input.value;\r\n\r\n    if(msg){\r\n        // message sent by client\r\n        clientData.text = msg;\r\n        clientData.managerId = user._id;\r\n        socket.emit('message',clientData);\r\n        input.value = '';\r\n        input.focus();\r\n    }\r\n});\r\n// message from server\r\nsocket.on('message',function(message){\r\n    console.log(message);\r\n    showMessage(message);\r\n    inbox.scrollTop = inbox.scrollHeight;\r\n\r\n});\r\nsocket.emit('joinUserRoom', clientData.userId);\r\n\r\n// join the room\r\nsocket.emit('managerJoin',clientData.userId);\r\n\r\n//showing the message in the chat box\r\nfunction showMessage(message){\r\n    const section = document.createElement('section');\r\n    if(message.userId === user._id){\r\n        section.classList.add('message_sent');\r\n    }\r\n    else{\r\n        section.classList.add('message_received');\r\n    }\r\n\r\n    section.innerHTML = `                    <section class=\"profile\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"icon\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" />\r\n                        </svg>\r\n                        <p class=\"user_name\">${message.Name}</p>\r\n                        <strong class=\"user_role\">${message.Role}</strong>\r\n                        <p class=\"message_time\">${new Date().toLocaleTimeString([],{hour: '2-digit',minute:'2-digit',hour12:'false'})}</p>\r\n\r\n                    </section>\r\n                    <p class=\"text\">${message.text}</p>`;\r\n    document.querySelector('.message_container').appendChild(section);\r\n}",
      "functions": [
        {
          "functionName": "",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 308,
              "endOffset": 613,
              "count": 1
            }
          ]
        },
        {
          "functionName": "",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 661,
              "endOffset": 781,
              "count": 1
            }
          ]
        },
        {
          "functionName": "showMessage",
          "isBlockCoverage": true,
          "ranges": [
            {
              "startOffset": 942,
              "endOffset": 2188,
              "count": 1
            },
            {
              "startOffset": 1121,
              "endOffset": 1191,
              "count": 0
            }
          ]
        }
      ]
    }
  ],
  "cssCoverage": [
    {
      "url": "http://localhost:3000/styles/manager_chat.css",
      "text": "* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    background-color: #fdfdfd;\r\n    color: #333;\r\n    line-height: 1.1;\r\n}\r\n\r\n.chat_system {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.inbox {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 70%;\r\n    height: 90vh;\r\n    border-radius: 8px;\r\n    border: 1px solid #ccc;\r\n    margin-top: 3%;\r\n    margin-left: 3%;\r\n    background-color: #fff;\r\n    overflow: hidden;\r\n    position: relative;\r\n}\r\n\r\n\r\n.inbox .heading {\r\n    padding: 10px 16px;\r\n    font-size: 1.2rem;\r\n    font-weight: 600;\r\n    background: #f5f5f5;\r\n    border-bottom: 1px solid #ddd;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 10;\r\n}\r\n\r\n\r\n.message_container {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding: 10px 16px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n}\r\n\r\n.message_received {\r\n    align-self: flex-start;\r\n    background: #e5e5ea;\r\n    color: #000;\r\n    border-bottom-left-radius: 4px;\r\n}\r\n\r\n .message_received {\r\n    padding: 10px 14px;\r\n    border-radius: 18px;\r\n    font-size: 0.95rem;\r\n    line-height: 1.4;\r\n    word-wrap: break-word;\r\n    display: inline-block;\r\n}\r\n/* Container for each sent message */\r\n.message_sent {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    margin: 10px 0;\r\n    max-width: 80%;\r\n    background-color: #426eff; \r\n    padding: 12px 15px;\r\n    border-radius: 20px;\r\n    box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n    position: relative;\r\n    margin-left: auto; \r\n    flex-direction: column;\r\n}\r\n\r\n\r\n.message_sent .profile {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n\r\n.message_sent .profile .icon {\r\n    width: 36px;\r\n    height: 36px;\r\n    color: #ffffff; \r\n}\r\n\r\n\r\n.message_sent .profile .user_name {\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    color: #ffffff;\r\n}\r\n\r\n\r\n.message_sent .profile .user_role {\r\n    font-size: 14px;\r\n    color: #000000;\r\n    margin-left: 5px;\r\n}\r\n\r\n.message_sent .profile .message_time {\r\n    font-size: 11px;\r\n    color: #ffffff;\r\n    margin-left: auto;\r\n}\r\n\r\n\r\n.message_sent .text {\r\n    font-size: 18px;\r\n    color: #ffffff;\r\n    line-height: 1.4;\r\n    word-wrap: break-word;\r\n}\r\n\r\n\r\n.message_sent::after {\r\n    content: '';\r\n    position: absolute;\r\n    right: -8px;\r\n    top: 20px;\r\n    border-width: 8px 0 8px 8px;\r\n    border-style: solid;\r\n    border-color: transparent transparent transparent #e0f7fa;\r\n}\r\n\r\n/* Container for each sent message */\r\n.message_received {\r\n    display: flex;\r\n    align-items: flex-end;\r\n    margin: 10px 0;\r\n    max-width: 80%;\r\n    background-color: #d1d1d1; \r\n    padding: 12px 15px;\r\n    border-radius: 20px;\r\n    box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n    position: relative;\r\n    margin-right: auto; \r\n    flex-direction: column;\r\n}\r\n\r\n.message_received .profile {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n\r\n.message_received .profile .icon {\r\n    width: 36px;\r\n    height: 36px;\r\n    color: #001c79; \r\n}\r\n\r\n\r\n.message_received .profile .user_name {\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    color: #000000;\r\n}\r\n\r\n.message_received .profile .user_role {\r\n    font-size: 14px;\r\n    color: #00796b;\r\n    margin-left: 5px;\r\n}\r\n\r\n\r\n.message_received .profile .message_time {\r\n    font-size: 11px;\r\n    color: #555;\r\n    margin-left: auto;\r\n}\r\n\r\n\r\n.message_received .text {\r\n    font-size: 18px;\r\n    color: #000000;\r\n    line-height: 1.4;\r\n    word-wrap: break-word;\r\n}\r\n\r\n\r\n.message_received::after {\r\n    content: '';\r\n    position: absolute;\r\n    left: -8px;\r\n    top: 20px;\r\n    border-width: 8px 0 8px 8px;\r\n    border-style: solid;\r\n    border-color: transparent transparent transparent #d1d1d1;\r\n}\r\n\r\n\r\n.input {\r\n    display: flex;\r\n    gap: 10px;\r\n    padding: 10px;\r\n    background: #f5f5f5;\r\n    border-top: 1px solid #ddd;\r\n    position: sticky;\r\n    bottom: 0;\r\n    z-index: 10;\r\n}\r\n\r\n.input_message {\r\n    flex: 1;\r\n    padding: 10px;\r\n    border-radius: 25px;\r\n    border: 1px solid #ccc;\r\n    font-size: 1rem;\r\n}\r\n\r\n.input button {\r\n    background-color: #000;\r\n    border: none;\r\n    color: white;\r\n    border-radius: 50%;\r\n    width: 40px;\r\n    height: 40px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.input button:hover {\r\n    background-color: #fd7200;\r\n}\r\n\r\n.input button svg {\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n\r\n\r\n.members {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 30%;\r\n    height: 90vh;\r\n    border-radius: 8px;\r\n    border: 1px solid #ccc;\r\n    margin-top: 3%;\r\n    margin-left: 3%;\r\n    margin-right: 3%;\r\n    background-color: #fff;\r\n    padding: 10px;\r\n    overflow-y: auto;\r\n}\r\n\r\n.members .profile {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 8px 0;\r\n    border-bottom: 1px solid #eee;\r\n    position: relative;\r\n}\r\n\r\n\r\n.members .profile:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n\r\n.icon_frame {\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #e0f2f1;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n\r\n.icon_frame .icon {\r\n    width: 24px;\r\n    height: 24px;\r\n    color: #2a5be0;\r\n}\r\n\r\n\r\n.members .user_name {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: #000000;\r\n}\r\n\r\n.members .user_role {\r\n    font-size: 14px;\r\n    color: #000000;\r\n    margin-left: 5px;\r\n}\r\n\r\n\r\n\r\n@media (max-width: 768px) {\r\n    .chat_system {\r\n        flex-direction: column;\r\n    }\r\n\r\n    .inbox, .members {\r\n        width: 100%;\r\n        margin: 2% 0;\r\n        height: auto;\r\n    }\r\n\r\n    .inbox {\r\n        height: 70vh;\r\n    }\r\n\r\n    .members {\r\n        max-height: 25vh;\r\n    }\r\n\r\n    .input_message {\r\n        font-size: 0.9rem;\r\n        padding: 8px;\r\n    }\r\n\r\n    .input button {\r\n        width: 36px;\r\n        height: 36px;\r\n    }\r\n}\r\n",
      "ranges": [
        {
          "start": 0,
          "end": 68
        },
        {
          "start": 72,
          "end": 221
        },
        {
          "start": 225,
          "end": 288
        },
        {
          "start": 292,
          "end": 562
        },
        {
          "start": 568,
          "end": 776
        },
        {
          "start": 782,
          "end": 932
        },
        {
          "start": 936,
          "end": 1068
        },
        {
          "start": 1073,
          "end": 1250
        },
        {
          "start": 1291,
          "end": 1608
        },
        {
          "start": 1614,
          "end": 1727
        },
        {
          "start": 1733,
          "end": 1825
        },
        {
          "start": 1831,
          "end": 1935
        },
        {
          "start": 1941,
          "end": 2045
        },
        {
          "start": 2049,
          "end": 2157
        },
        {
          "start": 2163,
          "end": 2281
        },
        {
          "start": 2287,
          "end": 2513
        },
        {
          "start": 2556,
          "end": 2876
        },
        {
          "start": 2880,
          "end": 2997
        },
        {
          "start": 3003,
          "end": 3099
        },
        {
          "start": 3105,
          "end": 3213
        },
        {
          "start": 3217,
          "end": 3325
        },
        {
          "start": 3331,
          "end": 3440
        },
        {
          "start": 3446,
          "end": 3568
        },
        {
          "start": 3574,
          "end": 3803
        },
        {
          "start": 3809,
          "end": 3992
        },
        {
          "start": 3996,
          "end": 4126
        },
        {
          "start": 4130,
          "end": 4375
        },
        {
          "start": 4379,
          "end": 4435
        },
        {
          "start": 4439,
          "end": 4498
        },
        {
          "start": 4504,
          "end": 4794
        },
        {
          "start": 4798,
          "end": 4964
        },
        {
          "start": 4970,
          "end": 5029
        },
        {
          "start": 5035,
          "end": 5221
        },
        {
          "start": 5227,
          "end": 5307
        },
        {
          "start": 5313,
          "end": 5403
        },
        {
          "start": 5407,
          "end": 5497
        }
      ]
    },
    {
      "url": "http://localhost:3000/styles/dashboard.css",
      "text": "* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n\r\n\r\n.dashboard {\r\n    position: fixed;\r\n    top: 60px; \r\n    left: 0;\r\n    width: 240px;\r\n    height: calc(100vh - 60px);\r\n    background: #153291;\r\n    color: #ffffff;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 1.5rem 1rem;\r\n    box-shadow: 2px 0 10px rgba(0,0,0,0.3);\r\n    transition: left 0.3s ease, width 0.3s ease;\r\n    z-index: 1000;\r\n}\r\n\r\n\r\n#dash {\r\n    font-size: 1.3rem;\r\n    font-weight: bold;\r\n    margin-bottom: 2rem;\r\n    text-align: center;\r\n    color: #f9f9f9;\r\n    letter-spacing: 1px;\r\n}\r\n\r\n\r\n.dashboard a {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n    padding: 0.8rem 1rem;\r\n    border-radius: 8px;\r\n    color: #d1d1d1;\r\n    text-decoration: none;\r\n    font-size: 0.95rem;\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n.dashboard a:hover {\r\n    background: #ff8800fb;\r\n    color: #ffffff;\r\n    transform: translateX(4px);\r\n}\r\n\r\n.dashboard a.active {\r\n    background: #4f46e5;\r\n    color: #ffffff;\r\n    font-weight: 600;\r\n}\r\n\r\n.dashboard .icon {\r\n    width: 22px;\r\n    height: 22px;\r\n    flex-shrink: 0;\r\n}\r\n\r\n/* Top Bar */\r\n.top_bar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 60px;\r\n  background: #ffffff;\r\n  color: #1e1e2f;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 1rem;\r\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\r\n  z-index: 1600;\r\n}\r\n\r\n\r\n.top_bar .left {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n\r\n#toggle_btn {\r\n  font-size: 1.6rem;\r\n  background: none;\r\n  border: none;\r\n  color: #1e1e2f;\r\n  cursor: pointer;\r\n  padding: 0.4rem;\r\n  border-radius: 6px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n#toggle_btn:hover {\r\n  background: rgba(0,0,0,0.05);\r\n}\r\n\r\n\r\n.logo {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.logo .icon1 {\r\n  width: 28px;\r\n  height: 28px;\r\n  color: #ff8800fb;\r\n}\r\n\r\n.heading {\r\n  font-size: 1.3rem;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  color: #153291;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.top_bar .role {\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  margin: 0;\r\n  color: #1e1e2f;\r\n}\r\n\r\n\r\n\r\n.main_content {\r\n    margin-top: 60px;      \r\n    margin-left: 240px;   \r\n    padding: 1rem;\r\n    background: #f9f9f9;\r\n    min-height: calc(100vh - 60px);\r\n    transition: margin-left 0.3s ease;\r\n}\r\n\r\n\r\n.footer {\r\n    background: #333;\r\n    color: #fff;\r\n    text-align: center;\r\n    padding: 1rem;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n\r\n.dashboard.hidden {\r\n    left: -240px;\r\n}\r\n\r\n.main_content.expanded {\r\n    margin-left: 0;\r\n}\r\n\r\n.logout button {\r\n  background: #e63946;\r\n  border: none;\r\n  color: #fff;\r\n  padding: 8px 16px;\r\n  border-radius: 6px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  cursor: pointer;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.logout button:hover {\r\n  background: #d62828;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .dashboard {\r\n        top: 0;\r\n        left: -240px;\r\n        height: 100vh;\r\n        box-shadow: 2px 0 12px rgba(0,0,0,0.5);\r\n        z-index: 1500;   \r\n    }\r\n\r\n    .dashboard.active {\r\n        left: 0;        \r\n    }\r\n\r\n    .main_content {\r\n        margin-left: 0 !important;\r\n        width: 100%;               \r\n        margin-top: 60px;     \r\n        position: relative; \r\n    }\r\n\r\n    .top_bar {\r\n        height: 55px;\r\n        padding: 0 0.8rem;\r\n    }\r\n\r\n    #toggle_btn {\r\n        font-size: 1.4rem;\r\n    }\r\n\r\n    .top_bar h4 {\r\n        font-size: 1rem;\r\n    }\r\n}\r\n",
      "ranges": [
        {
          "start": 0,
          "end": 135
        },
        {
          "start": 141,
          "end": 499
        },
        {
          "start": 505,
          "end": 661
        },
        {
          "start": 667,
          "end": 904
        },
        {
          "start": 1115,
          "end": 1194
        },
        {
          "start": 1213,
          "end": 1502
        },
        {
          "start": 1508,
          "end": 1583
        },
        {
          "start": 1589,
          "end": 1784
        },
        {
          "start": 1849,
          "end": 1917
        },
        {
          "start": 1921,
          "end": 1992
        },
        {
          "start": 1996,
          "end": 2111
        },
        {
          "start": 2115,
          "end": 2210
        },
        {
          "start": 2218,
          "end": 2416
        }
      ]
    }
  ]
}